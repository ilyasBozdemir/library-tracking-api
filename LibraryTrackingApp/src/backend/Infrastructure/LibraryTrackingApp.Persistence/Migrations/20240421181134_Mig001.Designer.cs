// <auto-generated />
using System;
using LibraryTrackingApp.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryTrackingApp.Persistence.Migrations
{
    [DbContext(typeof(AppIdentityDbContext))]
    [Migration("20240421181134_Mig001")]
    partial class Mig001
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookAuthors", b =>
                {
                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookAuthors", (string)null);

                    b.HasData(
                        new
                        {
                            AuthorId = new Guid("814b399c-1889-486b-be58-8358edb02553"),
                            BookId = new Guid("2ee3fa5d-1c27-47b2-962f-565c4b2ebcbd")
                        });
                });

            modelBuilder.Entity("BookTags", b =>
                {
                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TagId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookTags", "lm");

                    b.HasData(
                        new
                        {
                            TagId = new Guid("981a3a4b-d845-4599-9851-00388560d695"),
                            BookId = new Guid("2ee3fa5d-1c27-47b2-962f-565c4b2ebcbd")
                        },
                        new
                        {
                            TagId = new Guid("d39960dc-cb69-41b6-87b1-5af370cba3f9"),
                            BookId = new Guid("2ee3fa5d-1c27-47b2-962f-565c4b2ebcbd")
                        });
                });

            modelBuilder.Entity("LibraryBranchMembers", b =>
                {
                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MemberId", "LibraryBranchId");

                    b.HasIndex("LibraryBranchId");

                    b.ToTable("LibraryBranchMembers", "lm");

                    b.HasData(
                        new
                        {
                            MemberId = new Guid("a4dbcebd-9e28-4669-a3d8-260de4623545"),
                            LibraryBranchId = new Guid("b7eacdc5-fd66-44b8-b7d7-1600781d9e3c")
                        },
                        new
                        {
                            MemberId = new Guid("908fde15-116a-4bb3-98ec-e15c9a907609"),
                            LibraryBranchId = new Guid("b7eacdc5-fd66-44b8-b7d7-1600781d9e3c")
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Configuration.JwtSettingConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessTokenExpirationMinutes")
                        .HasColumnType("int")
                        .HasColumnName("AccessTokenExpirationMinutes");

                    b.Property<string>("Audience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Audience");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("Enabled");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("IsDeletedById")
                        .HasColumnType("int");

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Issuer");

                    b.Property<int>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SecretKey");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Subject");

                    b.HasKey("Id");

                    b.ToTable("JwtSettingConfigurations", "static");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a2a2e02c-8fb5-40a9-84c6-2d45fe1fda89"),
                            ConcurrencyStamp = "bac6a768-ed86-4598-8ff8-982733161227",
                            Name = "system",
                            NormalizedName = "SYSTEM"
                        },
                        new
                        {
                            Id = new Guid("f675ac3e-b67f-42d2-9b87-cc43996410a2"),
                            ConcurrencyStamp = "74f79e71-fc3e-458c-ba02-eeddcf09c757",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("b04d4e9b-9264-446e-ac6a-c562a1c2f21b"),
                            ConcurrencyStamp = "59cf93e7-3e1a-4d6b-acf1-34d096c18dc1",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = new Guid("66215c93-1bd0-4111-8ebc-004d10dcf66f"),
                            ConcurrencyStamp = "30eee71d-f1c4-45b7-a378-b750af9fdeeb",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9203e025-7fd7-4e5e-bfe2-b9a3d6307c46",
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDateUnix = 0L,
                            Email = "system@domain.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LockoutEnabled = false,
                            Name = "system",
                            NormalizedEmail = "SYSTEM@DOMAIN.COM",
                            NormalizedUserName = "SYSTEM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFib4kPOrhRQelsUYlAsUkSN9gOjy0XQPbSiML1NLEw0u6lMvN2/5aVgvuv1XJFHXw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Surname = "system",
                            TwoFactorEnabled = false,
                            UserName = "system"
                        },
                        new
                        {
                            Id = new Guid("a528e066-7a8f-4b4f-a133-bede8c5203d4"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "741449ec-1561-4fde-946e-d970e9e944c5",
                            CreatedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            CreatedDateUnix = 0L,
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            LockoutEnabled = false,
                            Name = "admin",
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOD0ouNmqtdMM55WRkOrAlD7MJpme1AGSMGKi3BmbORawR1sJhQ2KkHUU5qwJr0jYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Surname = "admin",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = new Guid("3d1e7839-4d42-418f-b30b-c95a5f80b788"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf7363c1-062f-43e7-b709-6023d1951f49",
                            CreatedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            CreatedDateUnix = 0L,
                            Email = "employee1@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            LockoutEnabled = false,
                            Name = "admin",
                            NormalizedEmail = "EMPLOYEE2@EXAMPLE.COM",
                            NormalizedUserName = "EMPLOYEE2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKslK8kYbm5Dhyp9ELXXboGrS92Cn9EwR/nNXvOAYet3iEEjt9dpm5vaZBH+NDpc1A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Surname = "admin",
                            TwoFactorEnabled = false,
                            UserName = "employee1@example.com"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.RoleScope", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScopeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.HasKey("RoleId", "ScopeId");

                    b.HasIndex("ScopeId");

                    b.ToTable("RolePermissions", "identity");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.Scope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Scopes", "identity");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("814b399c-1889-486b-be58-8358edb02553"),
                            Biography = "Joanne Rowling, better known by her pen name J.K. Rowling, is a British author, philanthropist, film producer, television producer, and screenwriter. She is best known for writing the Harry Potter fantasy series.",
                            BirthDate = new DateTime(1965, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Country = "United Kingdom",
                            CreatedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            CreatedDateUnix = 1713733893L,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            Name = "J.K.",
                            Surname = "Rowling"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BookFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BookStockBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BorrowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CoverImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FavoriteListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OriginalPublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PageCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReadingListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FavoriteListId");

                    b.HasIndex("GenreId");

                    b.HasIndex("ISBN");

                    b.HasIndex("LibraryBranchId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("ReadingListId");

                    b.HasIndex("Title");

                    b.ToTable("Books", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ee3fa5d-1c27-47b2-962f-565c4b2ebcbd"),
                            AuthorId = new Guid("814b399c-1889-486b-be58-8358edb02553"),
                            BookFormat = "PrintedBook",
                            BookLanguage = "English",
                            BookStatus = "Available",
                            BookStockBranchId = new Guid("00000000-0000-0000-0000-000000000000"),
                            BorrowId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CoverImageUrl = "https://m.media-amazon.com/images/I/81q77Q39nEL._SY385_.jpg",
                            CreatedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            CreatedDateUnix = 1713733893L,
                            Description = "Harry Potter has never even heard of Hogwarts when the letters start dropping on the doormat at number four, Privet Drive. Addressed in green ink on yellowish parchment with a purple seal, they are swiftly confiscated by his grisly aunt and uncle. Then, on Harry's eleventh birthday, a great beetle-eyed giant of a man called Rubeus Hagrid bursts in with some astonishing news: Harry Potter is a wizard, and he has a place at Hogwarts School of Witchcraft and Wizardry. An incredible adventure is about to begin!",
                            GenreId = new Guid("f5ae7646-d16f-4124-8f00-001895ad158d"),
                            ISBN = "9781408855652",
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsFeatured = true,
                            LastModifiedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            LibraryBranchId = new Guid("b7eacdc5-fd66-44b8-b7d7-1600781d9e3c"),
                            OriginalPublicationDate = new DateTime(1997, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PageCount = 352,
                            PublicationDate = new DateTime(1997, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = new Guid("009a1934-3bf0-4238-9372-ec2b4b07d196"),
                            Title = "Harry Potter and the Philosopher's Stone"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookGenre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BookGenres", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5ae7646-d16f-4124-8f00-001895ad158d"),
                            CreatedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            CreatedDateUnix = 1713733893L,
                            IsActive = true,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("a16a80ce-714c-4285-9a7b-e8403e0f587a"),
                            CreatedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            CreatedDateUnix = 1713733893L,
                            IsActive = true,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            Name = "Adventure"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookPublisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name");

                    b.ToTable("BookPublishers", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("009a1934-3bf0-4238-9372-ec2b4b07d196"),
                            Address = "50 Bedford Square, London, England",
                            CreatedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            CreatedDateUnix = 1713733893L,
                            Email = "info@bloomsbury.com",
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            Name = "Bloomsbury Publishing",
                            PhoneNumber = "+44 (0)20 7631 5600",
                            Website = "https://www.bloomsbury.com/"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookReturn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("BorrowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsLate")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<int>("PenaltyDurationInDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BorrowId")
                        .IsUnique();

                    b.HasIndex("ReturnDate");

                    b.ToTable("BookReturns", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("816ea31b-5615-4997-b465-05b7dd320dcb"),
                            BookStatus = 4,
                            BorrowId = new Guid("12dc9b1f-e100-4e0a-b4ac-62f14f94d094"),
                            CreatedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            CreatedDateUnix = 1713733893L,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsLate = false,
                            LastModifiedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            PenaltyDurationInDays = -13,
                            ReturnDate = new DateTime(2024, 4, 21, 21, 11, 33, 591, DateTimeKind.Local).AddTicks(3085)
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BookReviews", "lm");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookStock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("BookStocks", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b7f0dddd-ee6d-4bb2-952d-dd393f28b742"),
                            BookId = new Guid("2ee3fa5d-1c27-47b2-962f-565c4b2ebcbd"),
                            CreatedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            CreatedDateUnix = 1713733893L,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            Quantity = 100
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Book_Tags", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("981a3a4b-d845-4599-9851-00388560d695"),
                            BookId = new Guid("2ee3fa5d-1c27-47b2-962f-565c4b2ebcbd"),
                            CreatedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            CreatedDateUnix = 1713733893L,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            Name = "Hogwarts"
                        },
                        new
                        {
                            Id = new Guid("d39960dc-cb69-41b6-87b1-5af370cba3f9"),
                            BookId = new Guid("2ee3fa5d-1c27-47b2-962f-565c4b2ebcbd"),
                            CreatedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            CreatedDateUnix = 1713733893L,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            Name = "Harry Potter"
                        },
                        new
                        {
                            Id = new Guid("edc11ab3-edfc-464d-9839-1447cc74b342"),
                            BookId = new Guid("2ee3fa5d-1c27-47b2-962f-565c4b2ebcbd"),
                            CreatedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            CreatedDateUnix = 1713733893L,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            Name = "Quidditch"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BorrowBook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BorrowStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FeeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("HasFee")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("BorrowDate");

                    b.HasIndex("DueDate");

                    b.HasIndex("LenderId");

                    b.HasIndex("MemberId");

                    b.ToTable("BorrowBooks", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12dc9b1f-e100-4e0a-b4ac-62f14f94d094"),
                            BookId = new Guid("2ee3fa5d-1c27-47b2-962f-565c4b2ebcbd"),
                            BorrowDate = new DateTime(2024, 4, 21, 21, 11, 33, 591, DateTimeKind.Local).AddTicks(3060),
                            BorrowStatus = "Borrowed",
                            CreatedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            CreatedDateUnix = 1713733893L,
                            DueDate = new DateTime(2024, 5, 5, 21, 11, 33, 591, DateTimeKind.Local).AddTicks(3061),
                            FeeAmount = 0m,
                            HasFee = false,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            LenderId = new Guid("93f2f0c2-2514-466d-b765-df834beb9ad8"),
                            MemberId = new Guid("a4dbcebd-9e28-4669-a3d8-260de4623545")
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BranchHour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("ClosingTime")
                        .HasColumnType("time");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("OpeningTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ClosingTime");

                    b.HasIndex("DayOfWeek");

                    b.HasIndex("LibraryBranchId");

                    b.HasIndex("OpeningTime");

                    b.ToTable("BranchHours", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4548ca17-bf20-4512-9358-10d3e9d274af"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            CreatedDateUnix = 1713733893L,
                            DayOfWeek = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            LibraryBranchId = new Guid("b7eacdc5-fd66-44b8-b7d7-1600781d9e3c"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("f656b0f0-6829-4b5b-912a-aacaa536603a"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            CreatedDateUnix = 1713733893L,
                            DayOfWeek = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            LibraryBranchId = new Guid("b7eacdc5-fd66-44b8-b7d7-1600781d9e3c"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("bfbec703-91b3-4dac-b191-9f7e21445482"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            CreatedDateUnix = 1713733893L,
                            DayOfWeek = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            LibraryBranchId = new Guid("b7eacdc5-fd66-44b8-b7d7-1600781d9e3c"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("f09a5501-e6dc-41a8-a3b0-e1f6dd48198a"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            CreatedDateUnix = 1713733893L,
                            DayOfWeek = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            LibraryBranchId = new Guid("b7eacdc5-fd66-44b8-b7d7-1600781d9e3c"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("8e606b7e-ccb1-4fee-ad05-44a96ef056c1"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            CreatedDateUnix = 1713733893L,
                            DayOfWeek = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            LibraryBranchId = new Guid("b7eacdc5-fd66-44b8-b7d7-1600781d9e3c"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("9eed18a7-a603-4ccc-98e6-bffa0e3ba063"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            CreatedDateUnix = 1713733893L,
                            DayOfWeek = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            LibraryBranchId = new Guid("b7eacdc5-fd66-44b8-b7d7-1600781d9e3c"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("97045ec2-f165-4040-9741-779ea7de2dfe"),
                            ClosingTime = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            CreatedDateUnix = 1713733893L,
                            DayOfWeek = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            LibraryBranchId = new Guid("b7eacdc5-fd66-44b8-b7d7-1600781d9e3c"),
                            OpeningTime = new TimeSpan(0, 0, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.FavoriteList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("FavoriteLists", "lm");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchHourId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LibraryTransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("LibraryBranches", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b7eacdc5-fd66-44b8-b7d7-1600781d9e3c"),
                            Address = "123 Ana Cadde",
                            BookId = new Guid("00000000-0000-0000-0000-000000000000"),
                            BranchHourId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            CreatedDateUnix = 1713733893L,
                            Description = "Bu bir örnek kütüphane şubesidir.",
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            LibraryBranchId = new Guid("00000000-0000-0000-0000-000000000000"),
                            LibraryTransactionId = new Guid("00000000-0000-0000-0000-000000000000"),
                            MemberId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Örnek Kütüphane Şubesi",
                            PhoneNumber = "123-456-7890",
                            StaffId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.LibraryTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LibraryBranchId");

                    b.ToTable("LibraryTransactions", "lm");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("BorrowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ExtensionDurationInDays")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasPenalty")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsExtensionAllowed")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxLateReturnsAllowed")
                        .HasColumnType("int");

                    b.Property<string>("MemberType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MembershipDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfLateReturns")
                        .HasColumnType("int");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PenaltyDurationInDays")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Members", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a4dbcebd-9e28-4669-a3d8-260de4623545"),
                            Address = "123 Main Street",
                            BirthDate = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BorrowId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            CreatedDateUnix = 1713733893L,
                            Email = "john.doe@example.com",
                            ExtensionDurationInDays = 7,
                            Gender = "Male",
                            HasPenalty = false,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsExtensionAllowed = true,
                            LastModifiedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            LibraryBranchId = new Guid("b7eacdc5-fd66-44b8-b7d7-1600781d9e3c"),
                            MaxLateReturnsAllowed = 3,
                            MemberType = "Adult",
                            MembershipDate = new DateTime(2024, 4, 21, 21, 11, 33, 591, DateTimeKind.Local).AddTicks(2995),
                            Name = "John Doe",
                            NumberOfLateReturns = 0,
                            Occupation = "Software Engineer",
                            PenaltyDurationInDays = 0,
                            PhoneNumber = "+1234567890"
                        },
                        new
                        {
                            Id = new Guid("908fde15-116a-4bb3-98ec-e15c9a907609"),
                            Address = "456 Oak Street",
                            BirthDate = new DateTime(1985, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BorrowId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            CreatedDateUnix = 1713733893L,
                            Email = "jane.smith@example.com",
                            ExtensionDurationInDays = 0,
                            Gender = "Female",
                            HasPenalty = true,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsExtensionAllowed = false,
                            LastModifiedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            LibraryBranchId = new Guid("b7eacdc5-fd66-44b8-b7d7-1600781d9e3c"),
                            MaxLateReturnsAllowed = 3,
                            MemberType = "Teacher",
                            MembershipDate = new DateTime(2024, 4, 21, 21, 11, 33, 591, DateTimeKind.Local).AddTicks(3002),
                            Name = "Jane Smith",
                            NumberOfLateReturns = 2,
                            Occupation = "Teacher",
                            PenaltyDurationInDays = 7,
                            PhoneNumber = "+1987654321"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.ReadingList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ReadingLists", "lm");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EmploymentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsFullTime")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LibraryBranchId");

                    b.HasIndex("Phone");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Staffs", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("93f2f0c2-2514-466d-b765-df834beb9ad8"),
                            Address = "Employee Address",
                            CreatedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            CreatedDateUnix = 1713733893L,
                            EmploymentDate = new DateTime(2024, 4, 21, 21, 11, 33, 591, DateTimeKind.Local).AddTicks(3053),
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsFullTime = true,
                            LastModifiedById = new Guid("0c5e5f84-ae4b-4894-97b2-f365bf16f9ae"),
                            LibraryBranchId = new Guid("b7eacdc5-fd66-44b8-b7d7-1600781d9e3c"),
                            Phone = "+905553331122",
                            Salary = 3000.00m,
                            UserId = new Guid("3d1e7839-4d42-418f-b30b-c95a5f80b788")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<Guid>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>");

                    b.HasDiscriminator().HasValue("AppUserRole");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("a528e066-7a8f-4b4f-a133-bede8c5203d4"),
                            RoleId = new Guid("f675ac3e-b67f-42d2-9b87-cc43996410a2")
                        },
                        new
                        {
                            UserId = new Guid("3d1e7839-4d42-418f-b30b-c95a5f80b788"),
                            RoleId = new Guid("b04d4e9b-9264-446e-ac6a-c562a1c2f21b")
                        });
                });

            modelBuilder.Entity("BookAuthors", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookTags", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.BookTag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryBranchMembers", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", null)
                        .WithMany()
                        .HasForeignKey("LibraryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Member", null)
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppRole", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", null)
                        .WithMany("AppRoles")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.RoleScope", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppRole", "Role")
                        .WithMany("RoleScopes")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.Scope", "Scope")
                        .WithMany("RoleScopes")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Book", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.FavoriteList", null)
                        .WithMany("FavoriteBooks")
                        .HasForeignKey("FavoriteListId");

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.BookGenre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", "LibraryBranch")
                        .WithMany("Books")
                        .HasForeignKey("LibraryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.BookPublisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.ReadingList", null)
                        .WithMany("Books")
                        .HasForeignKey("ReadingListId");

                    b.Navigation("Genre");

                    b.Navigation("LibraryBranch");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookReturn", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.BorrowBook", "Borrow")
                        .WithOne("Return")
                        .HasForeignKey("LibraryTrackingApp.Domain.Entities.Library.BookReturn", "BorrowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Borrow");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookStock", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Book", "Book")
                        .WithMany("BookStocks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BorrowBook", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Book", "Book")
                        .WithMany("Borrows")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Staff", "Lender")
                        .WithMany()
                        .HasForeignKey("LenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Member", "Member")
                        .WithMany("Borrows")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Lender");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BranchHour", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", "LibraryBranch")
                        .WithMany("BranchHours")
                        .HasForeignKey("LibraryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryBranch");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.LibraryTransaction", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", "LibraryBranch")
                        .WithMany("Transactions")
                        .HasForeignKey("LibraryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryBranch");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Staff", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", "LibraryBranch")
                        .WithMany("Staffs")
                        .HasForeignKey("LibraryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", "User")
                        .WithOne("Staff")
                        .HasForeignKey("LibraryTrackingApp.Domain.Entities.Library.Staff", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LibraryBranch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppRole", b =>
                {
                    b.Navigation("RoleScopes");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Navigation("AppRoles");

                    b.Navigation("Staff")
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.Scope", b =>
                {
                    b.Navigation("RoleScopes");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Book", b =>
                {
                    b.Navigation("BookStocks");

                    b.Navigation("Borrows");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookGenre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookPublisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BorrowBook", b =>
                {
                    b.Navigation("Return")
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.FavoriteList", b =>
                {
                    b.Navigation("FavoriteBooks");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("BranchHours");

                    b.Navigation("Staffs");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Member", b =>
                {
                    b.Navigation("Borrows");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.ReadingList", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
