// <auto-generated />
using System;
using LibraryTrackingApp.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryTrackingApp.Persistence.Migrations
{
    [DbContext(typeof(AppIdentityDbContext))]
    [Migration("20240429105114_mig001")]
    partial class mig001
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookAuthors", b =>
                {
                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookAuthors", "lm");

                    b.HasData(
                        new
                        {
                            AuthorId = new Guid("083ecb57-f36b-4f12-8c77-39d2343dd4a9"),
                            BookId = new Guid("a56ce706-f92e-4c22-b9ab-b2b2ecd32008")
                        });
                });

            modelBuilder.Entity("BookTags", b =>
                {
                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TagId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookTags", "lm");

                    b.HasData(
                        new
                        {
                            TagId = new Guid("fb7816ca-3443-422a-a498-5cbbb24bfc45"),
                            BookId = new Guid("a56ce706-f92e-4c22-b9ab-b2b2ecd32008")
                        },
                        new
                        {
                            TagId = new Guid("e34fc271-a8f3-48aa-9a7d-d9db8b6ae7a9"),
                            BookId = new Guid("a56ce706-f92e-4c22-b9ab-b2b2ecd32008")
                        });
                });

            modelBuilder.Entity("LibraryBranchMembers", b =>
                {
                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MemberId", "LibraryBranchId");

                    b.HasIndex("LibraryBranchId");

                    b.ToTable("LibraryBranchMembers", "lm");

                    b.HasData(
                        new
                        {
                            MemberId = new Guid("9acc5bc2-c342-4a7d-b9a8-dbc2f93fa786"),
                            LibraryBranchId = new Guid("282ac419-5495-4e92-a109-b51055b8b631")
                        },
                        new
                        {
                            MemberId = new Guid("74faad27-6421-4829-8b6a-9c6e02bd6fa6"),
                            LibraryBranchId = new Guid("282ac419-5495-4e92-a109-b51055b8b631")
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Configuration.JwtSettingConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessTokenExpirationMinutes")
                        .HasColumnType("int")
                        .HasColumnName("AccessTokenExpirationMinutes");

                    b.Property<string>("Audience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Audience");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("Enabled");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("IsDeletedById")
                        .HasColumnType("int");

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Issuer");

                    b.Property<int>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SecretKey");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Subject");

                    b.HasKey("Id");

                    b.ToTable("JwtSettingConfigurations", "static");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Configuration.MailAccountConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("IsDeletedById")
                        .HasColumnType("int");

                    b.Property<int>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SmtpServer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("MailAccounts", "static");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5ad3b527-d475-445b-a9b0-a6462f7cd987"),
                            ConcurrencyStamp = "93a13c75-620d-4510-ad7d-d0b91ee0a2f0",
                            Name = "system",
                            NormalizedName = "SYSTEM"
                        },
                        new
                        {
                            Id = new Guid("d541ad6c-d990-4160-b430-c4ed048242a5"),
                            ConcurrencyStamp = "339f4420-bf36-42f1-a167-a67a7312611f",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("b966a17e-8090-4061-bb79-f811020145dd"),
                            ConcurrencyStamp = "dcd0ec78-61d1-41f1-816b-4d6fa7856a8f",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = new Guid("dab47e78-67e8-4b99-baa0-031b37e43b57"),
                            ConcurrencyStamp = "9b74dc13-3ae0-407f-ba96-ccd99502b8a1",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            AccessFailedCount = 0,
                            Address = "123 System St.",
                            BirthDate = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "6db92d3b-8b49-424d-86a1-0ed7e1db1652",
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDateUnix = 0L,
                            Email = "system@domain.com",
                            EmailConfirmed = true,
                            Gender = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LockoutEnabled = false,
                            Name = "System",
                            NormalizedEmail = "SYSTEM@DOMAIN.COM",
                            NormalizedUserName = "SYSTEM",
                            PasswordHash = "AQAAAAIAAYagAAAAECY88merkbGr1WK1Y3uo+BD5yd7s3l6bBfJ9ESjJVvlD6oJ33Rr2ZLpRqpnfpiK7Vg==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = new byte[0],
                            SecurityStamp = "",
                            Surname = "Admin",
                            TwoFactorEnabled = false,
                            UserName = "system"
                        },
                        new
                        {
                            Id = new Guid("77cf39ea-87a9-481b-929f-9abf80a7c1d7"),
                            AccessFailedCount = 0,
                            Address = "456 Admin St.",
                            BirthDate = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "60a3ae43-ac5e-4c6d-aaca-5c4ef8f8b64e",
                            CreatedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            CreatedDateUnix = 0L,
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            Gender = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            LockoutEnabled = false,
                            Name = "Admin",
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEArkj6N65dBOXg7veenD4YPpcr1PNEOPSTUlld5nkkS+wU0MwtcmRVSsK6yB5atsig==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = new byte[0],
                            SecurityStamp = "",
                            Surname = "Admin",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = new Guid("2e9a9efc-1e1c-4eba-8b03-1dad31d459b9"),
                            AccessFailedCount = 0,
                            Address = "789 Employee St.",
                            BirthDate = new DateTime(1990, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "70525978-70f4-4c26-8269-f12c77c6b50b",
                            CreatedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            CreatedDateUnix = 0L,
                            Email = "employee1@example.com",
                            EmailConfirmed = true,
                            Gender = 1,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            LockoutEnabled = false,
                            Name = "Employee",
                            NormalizedEmail = "EMPLOYEE1@EXAMPLE.COM",
                            NormalizedUserName = "EMPLOYEE1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELdxogC/bcwLrivYLnqbTKIjp/H1jaWT4XMTOUFLCmYnHG2vX39q9h2rWQFU1hEbhA==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = new byte[0],
                            SecurityStamp = "",
                            Surname = "One",
                            TwoFactorEnabled = false,
                            UserName = "employee1@example.com"
                        },
                        new
                        {
                            Id = new Guid("46236d25-f9e8-4b9e-9577-68cbceedfdca"),
                            AccessFailedCount = 0,
                            Address = "123 Main Street",
                            BirthDate = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "240a9024-0c8e-4c92-8401-cc6b9e1134c1",
                            CreatedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            CreatedDateUnix = 0L,
                            Email = "john.doe@example.com",
                            EmailConfirmed = true,
                            Gender = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            LockoutEnabled = false,
                            Name = "John",
                            NormalizedEmail = "JOHN.DOE@EXAMPLE.COM",
                            NormalizedUserName = "JOHN.DOE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM5ai2wz1GK/Fh3tE0TY0xFlbNR1CFfoJPpY5bklnVuvGzZnFVrdA46pqz8cyoo55w==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = new byte[0],
                            SecurityStamp = "",
                            Surname = "Doe",
                            TwoFactorEnabled = false,
                            UserName = "john.doe@example.com"
                        },
                        new
                        {
                            Id = new Guid("a8604411-9fbd-41c0-8cc9-fe2f96e7609c"),
                            AccessFailedCount = 0,
                            Address = "456 Oak Street",
                            BirthDate = new DateTime(1985, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "fb4f5583-ab84-402f-a947-6b4c50226c1d",
                            CreatedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            CreatedDateUnix = 0L,
                            Email = "jane.smith@example.com",
                            EmailConfirmed = true,
                            Gender = 1,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            LockoutEnabled = false,
                            Name = "Jane",
                            NormalizedEmail = "JANE.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "JANE.SMITH@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAG2aeEHR3NtH4IMc5GBO9+PxAEKCW3gMo6u2siRyGvv5ST2XQWqDJRgPbgN+FqZ6g==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = new byte[0],
                            SecurityStamp = "",
                            Surname = "Smith",
                            TwoFactorEnabled = false,
                            UserName = "jane.smith@example.com"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.RoleScope", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScopeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.HasKey("RoleId", "ScopeId");

                    b.HasIndex("ScopeId");

                    b.ToTable("RolePermissions", "identity");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.Scope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Scopes", "identity");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("083ecb57-f36b-4f12-8c77-39d2343dd4a9"),
                            Biography = "Joanne Rowling, better known by her pen name J.K. Rowling, is a British author, philanthropist, film producer, television producer, and screenwriter. She is best known for writing the Harry Potter fantasy series.",
                            BirthDate = new DateTime(1965, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Country = "United Kingdom",
                            CreatedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            CreatedDateUnix = 1714398673L,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            Name = "J.K.",
                            Surname = "Rowling"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AudioFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookCompartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BookFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BookStockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CoverImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FavoriteListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OriginalPublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PageCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReadingListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookCompartmentId");

                    b.HasIndex("FavoriteListId");

                    b.HasIndex("GenreId");

                    b.HasIndex("ISBN");

                    b.HasIndex("LibraryBranchId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("ReadingListId");

                    b.HasIndex("Title");

                    b.ToTable("Books", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a56ce706-f92e-4c22-b9ab-b2b2ecd32008"),
                            AuthorId = new Guid("083ecb57-f36b-4f12-8c77-39d2343dd4a9"),
                            BookFormat = "PrintedBook",
                            BookLanguage = "English",
                            BookStatus = "Active",
                            BookStockId = new Guid("e5d6c73a-e865-412c-98d9-e4bfd147784b"),
                            CoverImageUrl = "https://m.media-amazon.com/images/I/81q77Q39nEL._SY385_.jpg",
                            CreatedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            CreatedDateUnix = 1714398673L,
                            Description = "Harry Potter has never even heard of Hogwarts when the letters start dropping on the doormat at number four, Privet Drive. Addressed in green ink on yellowish parchment with a purple seal, they are swiftly confiscated by his grisly aunt and uncle. Then, on Harry's eleventh birthday, a great beetle-eyed giant of a man called Rubeus Hagrid bursts in with some astonishing news: Harry Potter is a wizard, and he has a place at Hogwarts School of Witchcraft and Wizardry. An incredible adventure is about to begin!",
                            GenreId = new Guid("086a66f7-1be6-46cb-a490-7d28badd16a7"),
                            ISBN = "9781408855652",
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsFeatured = true,
                            LastModifiedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            LibraryBranchId = new Guid("282ac419-5495-4e92-a109-b51055b8b631"),
                            OriginalPublicationDate = new DateTime(1997, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PageCount = 352,
                            PublicationDate = new DateTime(1997, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = new Guid("f71b05af-21b6-4439-9b4a-9119e1970a8e"),
                            Title = "Harry Potter and the Philosopher's Stone"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookCompartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ShelfId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ShelfId");

                    b.ToTable("BookCompartments", "lm");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookFormat")
                        .HasColumnType("int");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookLanguage")
                        .HasColumnType("int");

                    b.Property<string>("BookNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BookStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("BookEntry");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookGenre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BookGenres", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("086a66f7-1be6-46cb-a490-7d28badd16a7"),
                            CreatedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            CreatedDateUnix = 1714398673L,
                            IsActive = true,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("00191e89-4992-4fd5-aae9-73797b1ccc76"),
                            CreatedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            CreatedDateUnix = 1714398673L,
                            IsActive = true,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            Name = "Adventure"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookPublisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name");

                    b.ToTable("BookPublishers", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f71b05af-21b6-4439-9b4a-9119e1970a8e"),
                            Address = "50 Bedford Square, London, England",
                            CreatedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            CreatedDateUnix = 1714398673L,
                            Email = "info@bloomsbury.com",
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            Name = "Bloomsbury Publishing",
                            PhoneNumber = "+44 (0)20 7631 5600",
                            Website = "https://www.bloomsbury.com/"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BookReviews", "lm");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookStock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("BookStocks", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e5d6c73a-e865-412c-98d9-e4bfd147784b"),
                            BookId = new Guid("a56ce706-f92e-4c22-b9ab-b2b2ecd32008"),
                            CreatedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            CreatedDateUnix = 1714398673L,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            Quantity = 100
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Book_Tags", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fb7816ca-3443-422a-a498-5cbbb24bfc45"),
                            BookId = new Guid("a56ce706-f92e-4c22-b9ab-b2b2ecd32008"),
                            CreatedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            CreatedDateUnix = 1714398673L,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            Name = "Hogwarts"
                        },
                        new
                        {
                            Id = new Guid("e34fc271-a8f3-48aa-9a7d-d9db8b6ae7a9"),
                            BookId = new Guid("a56ce706-f92e-4c22-b9ab-b2b2ecd32008"),
                            CreatedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            CreatedDateUnix = 1714398673L,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            Name = "Harry Potter"
                        },
                        new
                        {
                            Id = new Guid("238d37b1-41c2-470c-ae0a-6a47c7a17842"),
                            BookId = new Guid("a56ce706-f92e-4c22-b9ab-b2b2ecd32008"),
                            CreatedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            CreatedDateUnix = 1714398673L,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            Name = "Quidditch"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BorrowLend", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BorrowStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FeeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("HasFee")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsLate")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<int?>("LateDurationInDays")
                        .HasColumnType("int");

                    b.Property<Guid>("LenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("BorrowDate");

                    b.HasIndex("DueDate");

                    b.HasIndex("LenderId");

                    b.HasIndex("MemberId");

                    b.ToTable("BorrowLends", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0eac556-a732-47d7-8a0a-30bace0331f2"),
                            BookId = new Guid("a56ce706-f92e-4c22-b9ab-b2b2ecd32008"),
                            BorrowDate = new DateTime(2024, 4, 19, 13, 51, 13, 966, DateTimeKind.Local).AddTicks(1228),
                            BorrowStatus = "Returned",
                            CreatedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            CreatedDateUnix = 1714398673L,
                            DueDate = new DateTime(2024, 4, 29, 13, 51, 13, 966, DateTimeKind.Local).AddTicks(1245),
                            FeeAmount = 0m,
                            HasFee = false,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsLate = false,
                            LastModifiedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            LateDurationInDays = 0,
                            LenderId = new Guid("a94c2719-ea2b-4b0c-be99-fd7268afb2f5"),
                            MemberId = new Guid("9acc5bc2-c342-4a7d-b9a8-dbc2f93fa786"),
                            ReturnDate = new DateTime(2024, 4, 29, 13, 51, 13, 966, DateTimeKind.Local).AddTicks(1245)
                        },
                        new
                        {
                            Id = new Guid("3b565299-2fdc-490c-a700-4a0cca5cc877"),
                            BookId = new Guid("a56ce706-f92e-4c22-b9ab-b2b2ecd32008"),
                            BorrowDate = new DateTime(2024, 4, 19, 13, 51, 13, 966, DateTimeKind.Local).AddTicks(1268),
                            BorrowStatus = "DelayedReturn",
                            CreatedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            CreatedDateUnix = 1714398673L,
                            DueDate = new DateTime(2024, 4, 28, 13, 51, 13, 966, DateTimeKind.Local).AddTicks(1295),
                            FeeAmount = 0m,
                            HasFee = false,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsLate = true,
                            LastModifiedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            LateDurationInDays = 1,
                            LenderId = new Guid("a94c2719-ea2b-4b0c-be99-fd7268afb2f5"),
                            MemberId = new Guid("74faad27-6421-4829-8b6a-9c6e02bd6fa6"),
                            ReturnDate = new DateTime(2024, 4, 29, 13, 51, 13, 966, DateTimeKind.Local).AddTicks(1306)
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BranchHour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("ClosingTime")
                        .HasColumnType("time");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("OpeningTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ClosingTime");

                    b.HasIndex("DayOfWeek");

                    b.HasIndex("LibraryBranchId");

                    b.HasIndex("OpeningTime");

                    b.ToTable("BranchHours", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("889b3e3a-176c-41c5-a09e-e0e5d2c8065b"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            CreatedDateUnix = 1714398673L,
                            DayOfWeek = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            LibraryBranchId = new Guid("282ac419-5495-4e92-a109-b51055b8b631"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("366adfd4-877c-4b48-af6b-a1d8064520fc"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            CreatedDateUnix = 1714398673L,
                            DayOfWeek = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            LibraryBranchId = new Guid("282ac419-5495-4e92-a109-b51055b8b631"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("e5efdaf7-d680-4733-9554-82ecf5cb1445"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            CreatedDateUnix = 1714398673L,
                            DayOfWeek = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            LibraryBranchId = new Guid("282ac419-5495-4e92-a109-b51055b8b631"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("f075bd9f-5a05-40d0-91d7-63a279baa5b6"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            CreatedDateUnix = 1714398673L,
                            DayOfWeek = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            LibraryBranchId = new Guid("282ac419-5495-4e92-a109-b51055b8b631"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("1ec6b73a-487c-4dfd-8280-2939d0417327"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            CreatedDateUnix = 1714398673L,
                            DayOfWeek = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            LibraryBranchId = new Guid("282ac419-5495-4e92-a109-b51055b8b631"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("45ce0949-c5ae-412c-9157-d28060cc9229"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            CreatedDateUnix = 1714398673L,
                            DayOfWeek = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            LibraryBranchId = new Guid("282ac419-5495-4e92-a109-b51055b8b631"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("2107ba2f-cb43-4de6-9d7b-e6d40be6c766"),
                            ClosingTime = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            CreatedDateUnix = 1714398673L,
                            DayOfWeek = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            LibraryBranchId = new Guid("282ac419-5495-4e92-a109-b51055b8b631"),
                            OpeningTime = new TimeSpan(0, 0, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.FavoriteList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("FavoriteLists", "lm");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchHourId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LibraryTransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("LibraryBranches", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("282ac419-5495-4e92-a109-b51055b8b631"),
                            Address = "123 Ana Cadde",
                            BookId = new Guid("00000000-0000-0000-0000-000000000000"),
                            BranchHourId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            CreatedDateUnix = 1714398673L,
                            Description = "Bu bir örnek kütüphane şubesidir.",
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            LibraryBranchId = new Guid("00000000-0000-0000-0000-000000000000"),
                            LibraryTransactionId = new Guid("00000000-0000-0000-0000-000000000000"),
                            MemberId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Örnek Kütüphane Şubesi",
                            PhoneNumber = "123-456-7890",
                            StaffId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.LibraryTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LibraryBranchId");

                    b.ToTable("LibraryTransactions", "lm");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BorrowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<int>("ExtensionDurationInDays")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasPenalty")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsExtensionAllowed")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxLateReturnsAllowed")
                        .HasColumnType("int");

                    b.Property<string>("MemberType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MembershipDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfLateReturns")
                        .HasColumnType("int");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PenaltyDurationInDays")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Members", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9acc5bc2-c342-4a7d-b9a8-dbc2f93fa786"),
                            BorrowId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            CreatedDateUnix = 1714398673L,
                            ExtensionDurationInDays = 7,
                            Gender = "Male",
                            HasPenalty = false,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsExtensionAllowed = true,
                            LastModifiedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            LibraryBranchId = new Guid("282ac419-5495-4e92-a109-b51055b8b631"),
                            MaxLateReturnsAllowed = 3,
                            MemberType = "Adult",
                            MembershipDate = new DateTime(2024, 4, 29, 13, 51, 13, 966, DateTimeKind.Local).AddTicks(1165),
                            NumberOfLateReturns = 0,
                            Occupation = "Software Engineer",
                            PenaltyDurationInDays = 0,
                            UserId = new Guid("46236d25-f9e8-4b9e-9577-68cbceedfdca")
                        },
                        new
                        {
                            Id = new Guid("74faad27-6421-4829-8b6a-9c6e02bd6fa6"),
                            BorrowId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            CreatedDateUnix = 1714398673L,
                            ExtensionDurationInDays = 0,
                            Gender = "Female",
                            HasPenalty = true,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsExtensionAllowed = false,
                            LastModifiedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            LibraryBranchId = new Guid("282ac419-5495-4e92-a109-b51055b8b631"),
                            MaxLateReturnsAllowed = 3,
                            MemberType = "Teacher",
                            MembershipDate = new DateTime(2024, 4, 29, 13, 51, 13, 966, DateTimeKind.Local).AddTicks(1171),
                            NumberOfLateReturns = 2,
                            Occupation = "Teacher",
                            PenaltyDurationInDays = 7,
                            UserId = new Guid("a8604411-9fbd-41c0-8cc9-fe2f96e7609c")
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.ReadingList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ReadingLists", "lm");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Shelf", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Shelves", "lm");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EmploymentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsFullTime")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LibraryBranchId");

                    b.HasIndex("Phone");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Staffs", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a94c2719-ea2b-4b0c-be99-fd7268afb2f5"),
                            Address = "Employee Address",
                            CreatedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            CreatedDateUnix = 1714398673L,
                            EmploymentDate = new DateTime(2024, 4, 29, 13, 51, 13, 966, DateTimeKind.Local).AddTicks(1220),
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsFullTime = true,
                            LastModifiedById = new Guid("44073bfd-0b99-48e7-a951-2c9203e7340e"),
                            LibraryBranchId = new Guid("282ac419-5495-4e92-a109-b51055b8b631"),
                            Phone = "+905553331122",
                            Salary = 3000.00m,
                            UserId = new Guid("2e9a9efc-1e1c-4eba-8b03-1dad31d459b9")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<Guid>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>");

                    b.HasDiscriminator().HasValue("AppUserRole");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("77cf39ea-87a9-481b-929f-9abf80a7c1d7"),
                            RoleId = new Guid("d541ad6c-d990-4160-b430-c4ed048242a5")
                        },
                        new
                        {
                            UserId = new Guid("2e9a9efc-1e1c-4eba-8b03-1dad31d459b9"),
                            RoleId = new Guid("b966a17e-8090-4061-bb79-f811020145dd")
                        });
                });

            modelBuilder.Entity("BookAuthors", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookTags", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.BookTag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryBranchMembers", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", null)
                        .WithMany()
                        .HasForeignKey("LibraryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Member", null)
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppRole", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", null)
                        .WithMany("AppRoles")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.RoleScope", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppRole", "Role")
                        .WithMany("RoleScopes")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.Scope", "Scope")
                        .WithMany("RoleScopes")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Book", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.BookCompartment", null)
                        .WithMany("Books")
                        .HasForeignKey("BookCompartmentId");

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.FavoriteList", null)
                        .WithMany("FavoriteBooks")
                        .HasForeignKey("FavoriteListId");

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.BookGenre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", "LibraryBranch")
                        .WithMany("Books")
                        .HasForeignKey("LibraryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.BookPublisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.ReadingList", null)
                        .WithMany("Books")
                        .HasForeignKey("ReadingListId");

                    b.Navigation("Genre");

                    b.Navigation("LibraryBranch");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookCompartment", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Shelf", null)
                        .WithMany("Compartments")
                        .HasForeignKey("ShelfId");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookEntry", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Book", "Book")
                        .WithMany("BookEntries")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookStock", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Book", "Book")
                        .WithMany("BookStocks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BorrowLend", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Book", "Book")
                        .WithMany("Borrows")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Staff", "Lender")
                        .WithMany()
                        .HasForeignKey("LenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Member", "Member")
                        .WithMany("Borrows")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Lender");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BranchHour", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", "LibraryBranch")
                        .WithMany("BranchHours")
                        .HasForeignKey("LibraryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryBranch");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.LibraryTransaction", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", "LibraryBranch")
                        .WithMany("Transactions")
                        .HasForeignKey("LibraryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryBranch");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Member", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", "User")
                        .WithOne("Member")
                        .HasForeignKey("LibraryTrackingApp.Domain.Entities.Library.Member", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Staff", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", "LibraryBranch")
                        .WithMany("Staffs")
                        .HasForeignKey("LibraryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", "User")
                        .WithOne("Staff")
                        .HasForeignKey("LibraryTrackingApp.Domain.Entities.Library.Staff", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LibraryBranch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppRole", b =>
                {
                    b.Navigation("RoleScopes");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Navigation("AppRoles");

                    b.Navigation("Member")
                        .IsRequired();

                    b.Navigation("Staff")
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.Scope", b =>
                {
                    b.Navigation("RoleScopes");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Book", b =>
                {
                    b.Navigation("BookEntries");

                    b.Navigation("BookStocks");

                    b.Navigation("Borrows");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookCompartment", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookGenre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookPublisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.FavoriteList", b =>
                {
                    b.Navigation("FavoriteBooks");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("BranchHours");

                    b.Navigation("Staffs");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Member", b =>
                {
                    b.Navigation("Borrows");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.ReadingList", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Shelf", b =>
                {
                    b.Navigation("Compartments");
                });
#pragma warning restore 612, 618
        }
    }
}
