// <auto-generated />
using System;
using LibraryTrackingApp.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryTrackingApp.Persistence.Migrations
{
    [DbContext(typeof(AppIdentityDbContext))]
    [Migration("20240418182902_Mig001")]
    partial class Mig001
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookAuthors", b =>
                {
                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookAuthors", (string)null);

                    b.HasData(
                        new
                        {
                            AuthorId = new Guid("de5951ec-1f7d-40d1-a2a8-58c84dedead9"),
                            BookId = new Guid("fd434411-cae1-4a69-855b-2e25dcdce5a5")
                        });
                });

            modelBuilder.Entity("BookTags", b =>
                {
                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TagId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookTags", "lm");

                    b.HasData(
                        new
                        {
                            TagId = new Guid("96466d58-4479-4936-8430-2fa4212d8971"),
                            BookId = new Guid("fd434411-cae1-4a69-855b-2e25dcdce5a5")
                        },
                        new
                        {
                            TagId = new Guid("dbfd4647-3a63-4da1-a636-050af9a96968"),
                            BookId = new Guid("fd434411-cae1-4a69-855b-2e25dcdce5a5")
                        });
                });

            modelBuilder.Entity("LibraryBranchMembers", b =>
                {
                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MemberId", "LibraryBranchId");

                    b.HasIndex("LibraryBranchId");

                    b.ToTable("LibraryBranchMembers", "lm");

                    b.HasData(
                        new
                        {
                            MemberId = new Guid("c82b02f4-bbdd-4643-b47d-0e8ba85c4ddf"),
                            LibraryBranchId = new Guid("dc6678ea-d746-40b4-b514-3bec6aaf9404")
                        },
                        new
                        {
                            MemberId = new Guid("3c0c4bff-5d46-48f9-94d5-d4142768cb08"),
                            LibraryBranchId = new Guid("dc6678ea-d746-40b4-b514-3bec6aaf9404")
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("288621b1-cd9f-402d-88be-74cb8034a420"),
                            ConcurrencyStamp = "c07e7168-08e7-438c-92ae-95ce65dddcd3",
                            Name = "system",
                            NormalizedName = "SYSTEM"
                        },
                        new
                        {
                            Id = new Guid("a62ce4f1-6ff3-4e7a-b3a8-616e3bb36513"),
                            ConcurrencyStamp = "b82da569-9908-4385-8ace-b7523c793285",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("6556fa23-f1f2-47fc-b060-a8a55a735177"),
                            ConcurrencyStamp = "fbaabb94-2370-4d6d-a104-eb0b60275f24",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = new Guid("1f5f3e4a-7552-4e65-a08f-458449cce306"),
                            ConcurrencyStamp = "6d066187-1eae-497b-b4d5-e8f3a83b7916",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "187bf0e3-fac1-4c1d-b82a-3dd01798b858",
                            CreatedBy = "SYSTEM",
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2024, 4, 18, 21, 29, 2, 240, DateTimeKind.Local).AddTicks(3084),
                            Email = "system@domain.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            LockoutEnabled = false,
                            Name = "system",
                            NormalizedEmail = "SYSTEM@DOMAIN.COM",
                            NormalizedUserName = "SYSTEM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEg0eDfYtVOmj6aVrueOAydNg6hPgs7VrI4kMJOc6HEeqLDRcNCbELd4wofGGAtoYw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Surname = "system",
                            TwoFactorEnabled = false,
                            UserName = "system"
                        },
                        new
                        {
                            Id = new Guid("fcb68775-eb8a-4d96-b3bf-001997ed1f87"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "875ef2b7-8ab4-46a9-aed8-973b683542e1",
                            CreatedBy = "system",
                            CreatedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            CreatedDate = new DateTime(2024, 4, 18, 21, 29, 2, 287, DateTimeKind.Local).AddTicks(6102),
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            LockoutEnabled = false,
                            Name = "admin",
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOVaqRf75giQ3Ll6lgznXPPbi1dMzGOTAPPeq5zls0BLBPdJQJtI6OF5jktVQJc3lg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Surname = "admin",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = new Guid("b34ea5da-b9e6-4a28-9bb4-545d7406cf55"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "53e9d7e3-9e76-47a7-be97-3940f2b4842e",
                            CreatedBy = "system",
                            CreatedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            CreatedDate = new DateTime(2024, 4, 18, 21, 29, 2, 329, DateTimeKind.Local).AddTicks(6205),
                            Email = "employee1@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            LockoutEnabled = false,
                            Name = "admin",
                            NormalizedEmail = "EMPLOYEE2@EXAMPLE.COM",
                            NormalizedUserName = "EMPLOYEE2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ9UNt+aUtqiMa80O4RQ50mwYu94RXbGaJx5FEXv3ts0E+MBNQHFf/RTuDI0vGgTHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Surname = "admin",
                            TwoFactorEnabled = false,
                            UserName = "employee1@example.com"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.RoleScope", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScopeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.HasKey("RoleId", "ScopeId");

                    b.HasIndex("ScopeId");

                    b.ToTable("RolePermissions", "identity");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.Scope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Scopes", "identity");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("de5951ec-1f7d-40d1-a2a8-58c84dedead9"),
                            Biography = "Joanne Rowling, better known by her pen name J.K. Rowling, is a British author, philanthropist, film producer, television producer, and screenwriter. She is best known for writing the Harry Potter fantasy series.",
                            BirthDate = new DateTime(1965, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Country = "United Kingdom",
                            CreatedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            CreatedDateUnix = 1713475742L,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            Name = "J.K.",
                            Surname = "Rowling"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BookFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BookStockBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BorrowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CoverImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OriginalPublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PageCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("ISBN");

                    b.HasIndex("LibraryBranchId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("Title");

                    b.ToTable("Books", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fd434411-cae1-4a69-855b-2e25dcdce5a5"),
                            AuthorId = new Guid("de5951ec-1f7d-40d1-a2a8-58c84dedead9"),
                            BookFormat = "PrintedBook",
                            BookLanguage = "English",
                            BookStatus = "Available",
                            BookStockBranchId = new Guid("00000000-0000-0000-0000-000000000000"),
                            BorrowId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CoverImageUrl = "https://m.media-amazon.com/images/I/81q77Q39nEL._SY385_.jpg",
                            CreatedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            CreatedDateUnix = 1713475742L,
                            Description = "Harry Potter has never even heard of Hogwarts when the letters start dropping on the doormat at number four, Privet Drive. Addressed in green ink on yellowish parchment with a purple seal, they are swiftly confiscated by his grisly aunt and uncle. Then, on Harry's eleventh birthday, a great beetle-eyed giant of a man called Rubeus Hagrid bursts in with some astonishing news: Harry Potter is a wizard, and he has a place at Hogwarts School of Witchcraft and Wizardry. An incredible adventure is about to begin!",
                            GenreId = new Guid("bf60b3e8-7e68-4c64-9c77-fdc74908643d"),
                            ISBN = "9781408855652",
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsFeatured = true,
                            LastModifiedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            LibraryBranchId = new Guid("dc6678ea-d746-40b4-b514-3bec6aaf9404"),
                            OriginalPublicationDate = new DateTime(1997, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PageCount = 352,
                            PublicationDate = new DateTime(1997, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = new Guid("54e898f1-26e3-47cb-b2bb-0ec5d1247b70"),
                            Title = "Harry Potter and the Philosopher's Stone"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookGenre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BookGenres", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bf60b3e8-7e68-4c64-9c77-fdc74908643d"),
                            CreatedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            CreatedDateUnix = 1713475742L,
                            IsActive = true,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("cd91aa88-e6a3-47d8-a61e-ed245a2aadf3"),
                            CreatedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            CreatedDateUnix = 1713475742L,
                            IsActive = true,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            Name = "Adventure"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookPublisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name");

                    b.ToTable("BookPublishers", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("54e898f1-26e3-47cb-b2bb-0ec5d1247b70"),
                            Address = "50 Bedford Square, London, England",
                            CreatedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            CreatedDateUnix = 1713475742L,
                            Email = "info@bloomsbury.com",
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            Name = "Bloomsbury Publishing",
                            PhoneNumber = "+44 (0)20 7631 5600",
                            Website = "https://www.bloomsbury.com/"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookReturn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("BorrowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsLate")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<int>("PenaltyDurationInDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BorrowId")
                        .IsUnique();

                    b.HasIndex("ReturnDate");

                    b.ToTable("BookReturns", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8f2e4cb7-6d6a-41f5-b37d-a581bb1faa5c"),
                            BookStatus = 4,
                            BorrowId = new Guid("8e34963f-0a3b-47a5-9314-34b821ba79de"),
                            CreatedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            CreatedDateUnix = 1713475742L,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsLate = false,
                            LastModifiedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            PenaltyDurationInDays = -13,
                            ReturnDate = new DateTime(2024, 4, 18, 21, 29, 2, 374, DateTimeKind.Local).AddTicks(7568)
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookStock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("BookStocks", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("715074fb-7901-4eae-8c79-304d78da86c6"),
                            BookId = new Guid("fd434411-cae1-4a69-855b-2e25dcdce5a5"),
                            CreatedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            CreatedDateUnix = 1713475742L,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            Quantity = 100
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Book_Tags", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("96466d58-4479-4936-8430-2fa4212d8971"),
                            BookId = new Guid("fd434411-cae1-4a69-855b-2e25dcdce5a5"),
                            CreatedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            CreatedDateUnix = 1713475742L,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            Name = "Hogwarts"
                        },
                        new
                        {
                            Id = new Guid("dbfd4647-3a63-4da1-a636-050af9a96968"),
                            BookId = new Guid("fd434411-cae1-4a69-855b-2e25dcdce5a5"),
                            CreatedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            CreatedDateUnix = 1713475742L,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            Name = "Harry Potter"
                        },
                        new
                        {
                            Id = new Guid("3cdd38f2-ba11-453d-83a1-f41b353f95d0"),
                            BookId = new Guid("fd434411-cae1-4a69-855b-2e25dcdce5a5"),
                            CreatedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            CreatedDateUnix = 1713475742L,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            Name = "Quidditch"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BorrowBook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BorrowStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasFee")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("BorrowDate");

                    b.HasIndex("DueDate");

                    b.HasIndex("LenderId");

                    b.HasIndex("MemberId");

                    b.ToTable("BorrowBooks", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e34963f-0a3b-47a5-9314-34b821ba79de"),
                            BookId = new Guid("fd434411-cae1-4a69-855b-2e25dcdce5a5"),
                            BorrowDate = new DateTime(2024, 4, 18, 21, 29, 2, 374, DateTimeKind.Local).AddTicks(7543),
                            BorrowStatus = "Borrowed",
                            CreatedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            CreatedDateUnix = 1713475742L,
                            DueDate = new DateTime(2024, 5, 2, 21, 29, 2, 374, DateTimeKind.Local).AddTicks(7544),
                            HasFee = false,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            LenderId = new Guid("b9373aaf-4c75-4d8b-aad6-aa834b115849"),
                            MemberId = new Guid("c82b02f4-bbdd-4643-b47d-0e8ba85c4ddf")
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BranchHour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("ClosingTime")
                        .HasColumnType("time");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("OpeningTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ClosingTime");

                    b.HasIndex("DayOfWeek");

                    b.HasIndex("LibraryBranchId");

                    b.HasIndex("OpeningTime");

                    b.ToTable("BranchHours", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("040d8537-a55b-499b-8e65-02a764903b45"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            CreatedDateUnix = 1713475742L,
                            DayOfWeek = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            LibraryBranchId = new Guid("dc6678ea-d746-40b4-b514-3bec6aaf9404"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("83d48b86-ad88-4144-afe3-79ae7a102e45"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            CreatedDateUnix = 1713475742L,
                            DayOfWeek = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            LibraryBranchId = new Guid("dc6678ea-d746-40b4-b514-3bec6aaf9404"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("02f66609-1bbc-4880-94d0-6a27d0f391ee"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            CreatedDateUnix = 1713475742L,
                            DayOfWeek = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            LibraryBranchId = new Guid("dc6678ea-d746-40b4-b514-3bec6aaf9404"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("31eb4c14-c71a-4cf2-a3d7-802e78d4de94"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            CreatedDateUnix = 1713475742L,
                            DayOfWeek = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            LibraryBranchId = new Guid("dc6678ea-d746-40b4-b514-3bec6aaf9404"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("87e50036-b4ec-4832-afa5-94ef434e2e76"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            CreatedDateUnix = 1713475742L,
                            DayOfWeek = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            LibraryBranchId = new Guid("dc6678ea-d746-40b4-b514-3bec6aaf9404"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("c0f62571-a6ed-4197-851a-48914522323d"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            CreatedDateUnix = 1713475742L,
                            DayOfWeek = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            LibraryBranchId = new Guid("dc6678ea-d746-40b4-b514-3bec6aaf9404"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("ecd95182-8bff-4953-8083-19a57a4c64b8"),
                            ClosingTime = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            CreatedDateUnix = 1713475742L,
                            DayOfWeek = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            LibraryBranchId = new Guid("dc6678ea-d746-40b4-b514-3bec6aaf9404"),
                            OpeningTime = new TimeSpan(0, 0, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchHourId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LibraryTransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("LibraryBranches", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dc6678ea-d746-40b4-b514-3bec6aaf9404"),
                            Address = "123 Ana Cadde",
                            BookId = new Guid("00000000-0000-0000-0000-000000000000"),
                            BranchHourId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            CreatedDateUnix = 1713475742L,
                            Description = "Bu bir örnek kütüphane şubesidir.",
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            LibraryBranchId = new Guid("00000000-0000-0000-0000-000000000000"),
                            LibraryTransactionId = new Guid("00000000-0000-0000-0000-000000000000"),
                            MemberId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Örnek Kütüphane Şubesi",
                            PhoneNumber = "123-456-7890",
                            StaffId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.LibraryTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LibraryBranchId");

                    b.ToTable("LibraryTransactions", "lm");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("BorrowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ExtensionDurationInDays")
                        .HasColumnType("int");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPenalty")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsExtensionAllowed")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxLateReturnsAllowed")
                        .HasColumnType("int");

                    b.Property<DateTime>("MembershipDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfLateReturns")
                        .HasColumnType("int");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PenaltyDurationInDays")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Members", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c82b02f4-bbdd-4643-b47d-0e8ba85c4ddf"),
                            Address = "123 Main Street",
                            BirthDate = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BorrowId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            CreatedDateUnix = 1713475742L,
                            Email = "john.doe@example.com",
                            ExtensionDurationInDays = 7,
                            Gender = true,
                            HasPenalty = false,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsExtensionAllowed = true,
                            LastModifiedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            LibraryBranchId = new Guid("dc6678ea-d746-40b4-b514-3bec6aaf9404"),
                            MaxLateReturnsAllowed = 3,
                            MembershipDate = new DateTime(2024, 4, 18, 21, 29, 2, 374, DateTimeKind.Local).AddTicks(7491),
                            Name = "John Doe",
                            NumberOfLateReturns = 0,
                            Occupation = "Software Engineer",
                            PenaltyDurationInDays = 0,
                            PhoneNumber = "+1234567890"
                        },
                        new
                        {
                            Id = new Guid("3c0c4bff-5d46-48f9-94d5-d4142768cb08"),
                            Address = "456 Oak Street",
                            BirthDate = new DateTime(1985, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BorrowId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            CreatedDateUnix = 1713475742L,
                            Email = "jane.smith@example.com",
                            ExtensionDurationInDays = 0,
                            Gender = false,
                            HasPenalty = true,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsExtensionAllowed = false,
                            LastModifiedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            LibraryBranchId = new Guid("dc6678ea-d746-40b4-b514-3bec6aaf9404"),
                            MaxLateReturnsAllowed = 3,
                            MembershipDate = new DateTime(2024, 4, 18, 21, 29, 2, 374, DateTimeKind.Local).AddTicks(7496),
                            Name = "Jane Smith",
                            NumberOfLateReturns = 2,
                            Occupation = "Teacher",
                            PenaltyDurationInDays = 7,
                            PhoneNumber = "+1987654321"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EmploymentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsFullTime")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LibraryBranchId");

                    b.HasIndex("Phone");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Staffs", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b9373aaf-4c75-4d8b-aad6-aa834b115849"),
                            Address = "Employee Address",
                            CreatedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            CreatedDateUnix = 1713475742L,
                            EmploymentDate = new DateTime(2024, 4, 18, 21, 29, 2, 374, DateTimeKind.Local).AddTicks(7531),
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsFullTime = true,
                            LastModifiedById = new Guid("c5c04fd3-6fc0-43b2-8f2e-cd99a9484bf3"),
                            LibraryBranchId = new Guid("dc6678ea-d746-40b4-b514-3bec6aaf9404"),
                            Phone = "+905553331122",
                            Salary = 3000.00m,
                            UserId = new Guid("b34ea5da-b9e6-4a28-9bb4-545d7406cf55")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<Guid>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>");

                    b.HasDiscriminator().HasValue("AppUserRole");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("fcb68775-eb8a-4d96-b3bf-001997ed1f87"),
                            RoleId = new Guid("a62ce4f1-6ff3-4e7a-b3a8-616e3bb36513")
                        },
                        new
                        {
                            UserId = new Guid("b34ea5da-b9e6-4a28-9bb4-545d7406cf55"),
                            RoleId = new Guid("6556fa23-f1f2-47fc-b060-a8a55a735177")
                        });
                });

            modelBuilder.Entity("BookAuthors", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookTags", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.BookTag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryBranchMembers", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", null)
                        .WithMany()
                        .HasForeignKey("LibraryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Member", null)
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppRole", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", null)
                        .WithMany("AppRoles")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.RoleScope", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppRole", "Role")
                        .WithMany("RoleScopes")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.Scope", "Scope")
                        .WithMany("RoleScopes")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Book", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.BookGenre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", "LibraryBranch")
                        .WithMany("Books")
                        .HasForeignKey("LibraryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.BookPublisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("LibraryBranch");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookReturn", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.BorrowBook", "Borrow")
                        .WithOne("Return")
                        .HasForeignKey("LibraryTrackingApp.Domain.Entities.Library.BookReturn", "BorrowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Borrow");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookStock", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Book", "Book")
                        .WithMany("BookStocks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BorrowBook", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Book", "Book")
                        .WithMany("Borrows")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Staff", "Lender")
                        .WithMany()
                        .HasForeignKey("LenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Member", "Member")
                        .WithMany("Borrows")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Lender");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BranchHour", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", "LibraryBranch")
                        .WithMany("BranchHours")
                        .HasForeignKey("LibraryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryBranch");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.LibraryTransaction", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", "LibraryBranch")
                        .WithMany("Transactions")
                        .HasForeignKey("LibraryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryBranch");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Staff", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", "LibraryBranch")
                        .WithMany("Staffs")
                        .HasForeignKey("LibraryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", "User")
                        .WithOne("Staff")
                        .HasForeignKey("LibraryTrackingApp.Domain.Entities.Library.Staff", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LibraryBranch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppRole", b =>
                {
                    b.Navigation("RoleScopes");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Navigation("AppRoles");

                    b.Navigation("Staff")
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.Scope", b =>
                {
                    b.Navigation("RoleScopes");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Book", b =>
                {
                    b.Navigation("BookStocks");

                    b.Navigation("Borrows");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookGenre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookPublisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BorrowBook", b =>
                {
                    b.Navigation("Return")
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("BranchHours");

                    b.Navigation("Staffs");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Member", b =>
                {
                    b.Navigation("Borrows");
                });
#pragma warning restore 612, 618
        }
    }
}
