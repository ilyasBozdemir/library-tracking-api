// <auto-generated />
using System;
using LibraryTrackingApp.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryTrackingApp.Persistence.Migrations
{
    [DbContext(typeof(AppIdentityDbContext))]
    [Migration("20240414123026_mig001")]
    partial class mig001
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookAuthors", b =>
                {
                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookAuthors", (string)null);

                    b.HasData(
                        new
                        {
                            AuthorId = new Guid("9825e537-83e0-40ef-a601-4479772d12e7"),
                            BookId = new Guid("10405239-c787-4a4c-b01f-00b10a55ec9c")
                        });
                });

            modelBuilder.Entity("BookTags", b =>
                {
                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TagId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookTags", "lm");

                    b.HasData(
                        new
                        {
                            TagId = new Guid("fc4f3658-6498-4f3f-9f04-11013025584b"),
                            BookId = new Guid("10405239-c787-4a4c-b01f-00b10a55ec9c")
                        },
                        new
                        {
                            TagId = new Guid("9a5e3858-aa7b-4818-856b-38c5bb21ca1e"),
                            BookId = new Guid("10405239-c787-4a4c-b01f-00b10a55ec9c")
                        });
                });

            modelBuilder.Entity("LibraryBranchMembers", b =>
                {
                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MemberId", "LibraryBranchId");

                    b.HasIndex("LibraryBranchId");

                    b.ToTable("LibraryBranchMembers", "lm");

                    b.HasData(
                        new
                        {
                            MemberId = new Guid("41261b67-19e9-404e-9cf1-1cd45f378e41"),
                            LibraryBranchId = new Guid("9c17a9d1-277d-4227-adaa-1a0c83559188")
                        },
                        new
                        {
                            MemberId = new Guid("1e2e2b83-224f-4461-93e7-0b6448553409"),
                            LibraryBranchId = new Guid("9c17a9d1-277d-4227-adaa-1a0c83559188")
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6089e326-0c0f-488b-b0aa-0b00df1218a4"),
                            ConcurrencyStamp = "b6d138d6-80b7-4439-8625-150b9506093a",
                            Name = "system",
                            NormalizedName = "SYSTEM"
                        },
                        new
                        {
                            Id = new Guid("e61c43e5-d940-424f-995c-f78767f43956"),
                            ConcurrencyStamp = "d1cdddbe-8b1e-4e92-8b16-157da9994b31",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("8e0cd7bc-bc89-4ca0-8aca-f96488a8f8b6"),
                            ConcurrencyStamp = "5f4afd77-a3fa-494f-90fe-c4676d260c83",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = new Guid("b4722322-72e5-4000-a818-45be45efb465"),
                            ConcurrencyStamp = "45071d4b-ddbf-41ec-b4fd-277479d979e8",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ac947006-18d9-4006-a629-661840f97ceb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "88482ebb-520a-4805-8efb-9bb136f3efa2",
                            CreatedBy = "SYSTEM",
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2024, 4, 14, 15, 30, 26, 93, DateTimeKind.Local).AddTicks(8274),
                            Email = "system@domain.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            LockoutEnabled = false,
                            Name = "system",
                            NormalizedEmail = "SYSTEM@DOMAIN.COM",
                            NormalizedUserName = "SYSTEM",
                            PasswordHash = "AQAAAAIAAYagAAAAECKuXNb761ish0sy/buQr+doccsSUU8GsdzJbqYhrX/Wxklr1ZAmasksqz3O6XMAyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Surname = "system",
                            TwoFactorEnabled = false,
                            UserName = "system"
                        },
                        new
                        {
                            Id = new Guid("b9d2641b-437a-4515-92b9-137688dd16bf"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a560d7b6-89ab-45b7-ad90-1904d14be7c2",
                            CreatedBy = "system",
                            CreatedById = new Guid("ac947006-18d9-4006-a629-661840f97ceb"),
                            CreatedDate = new DateTime(2024, 4, 14, 15, 30, 26, 156, DateTimeKind.Local).AddTicks(9393),
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            LockoutEnabled = false,
                            Name = "admin",
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK2u0v9T52YIClp0k9ur0sIgjDZfKGkgmazm4qrlYtO4p7r7TA99g4tG17yqHu/sSQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Surname = "admin",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = new Guid("2f4602fa-1225-4cfb-ac69-6c6b87608fc0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ebc1dca-66d1-4004-af54-07fc6369418c",
                            CreatedBy = "system",
                            CreatedById = new Guid("ac947006-18d9-4006-a629-661840f97ceb"),
                            CreatedDate = new DateTime(2024, 4, 14, 15, 30, 26, 201, DateTimeKind.Local).AddTicks(293),
                            Email = "employee1@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            LockoutEnabled = false,
                            Name = "admin",
                            NormalizedEmail = "EMPLOYEE2@EXAMPLE.COM",
                            NormalizedUserName = "EMPLOYEE2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIzm5JL2JXtZO4bHns+y8ZOfXxwDYfjqdngBEFjwQM5ZhS/gVgq82ELRH//LEdDxmw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Surname = "admin",
                            TwoFactorEnabled = false,
                            UserName = "employee1@example.com"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.RoleScope", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScopeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleId", "ScopeId");

                    b.HasIndex("ScopeId");

                    b.ToTable("RolePermissions", "identity");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.Scope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Scopes", "identity");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9825e537-83e0-40ef-a601-4479772d12e7"),
                            Biography = "Joanne Rowling, better known by her pen name J.K. Rowling, is a British author, philanthropist, film producer, television producer, and screenwriter. She is best known for writing the Harry Potter fantasy series.",
                            BirthDate = new DateTime(1965, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Country = "United Kingdom",
                            CreatedBy = "system",
                            CreatedById = new Guid("ac947006-18d9-4006-a629-661840f97ceb"),
                            CreatedDate = new DateTime(2024, 4, 14, 15, 30, 26, 245, DateTimeKind.Local).AddTicks(9291),
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            Name = "J.K.",
                            Surname = "Rowling"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BookFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BookStockBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BorrowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CoverImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OriginalPublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PageCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("LibraryBranchId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10405239-c787-4a4c-b01f-00b10a55ec9c"),
                            AuthorId = new Guid("9825e537-83e0-40ef-a601-4479772d12e7"),
                            BookFormat = "PrintedBook",
                            BookLanguage = "English",
                            BookStatus = "Available",
                            BookStockBranchId = new Guid("00000000-0000-0000-0000-000000000000"),
                            BorrowId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CoverImageUrl = "https://m.media-amazon.com/images/I/81q77Q39nEL._SY385_.jpg",
                            CreatedBy = "system",
                            CreatedById = new Guid("ac947006-18d9-4006-a629-661840f97ceb"),
                            CreatedDate = new DateTime(2024, 4, 14, 15, 30, 26, 245, DateTimeKind.Local).AddTicks(9339),
                            Description = "Harry Potter has never even heard of Hogwarts when the letters start dropping on the doormat at number four, Privet Drive. Addressed in green ink on yellowish parchment with a purple seal, they are swiftly confiscated by his grisly aunt and uncle. Then, on Harry's eleventh birthday, a great beetle-eyed giant of a man called Rubeus Hagrid bursts in with some astonishing news: Harry Potter is a wizard, and he has a place at Hogwarts School of Witchcraft and Wizardry. An incredible adventure is about to begin!",
                            GenreId = new Guid("f596c279-7a11-47db-bfce-04b05981bc2d"),
                            ISBN = "9781408855652",
                            IsDeleted = false,
                            IsFeatured = true,
                            LastModifiedBy = "SYSTEM",
                            LibraryBranchId = new Guid("9c17a9d1-277d-4227-adaa-1a0c83559188"),
                            OriginalPublicationDate = new DateTime(1997, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PageCount = 352,
                            PublicationDate = new DateTime(1997, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = new Guid("76ca146f-0f45-4775-ac37-7c9e0c56e4b0"),
                            Title = "Harry Potter and the Philosopher's Stone"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookStock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("BookStocks", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db4779f7-7fc5-43fe-a863-b2d7b0848cb0"),
                            BookId = new Guid("10405239-c787-4a4c-b01f-00b10a55ec9c"),
                            CreatedBy = "system",
                            CreatedById = new Guid("ac947006-18d9-4006-a629-661840f97ceb"),
                            CreatedDate = new DateTime(2024, 4, 14, 15, 30, 26, 245, DateTimeKind.Local).AddTicks(9562),
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            Quantity = 100
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Borrow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BorrowStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasFee")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("LenderId");

                    b.HasIndex("MemberId");

                    b.ToTable("Borrows", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("071c761a-ccd6-4146-b7f3-5c7cefaa1de2"),
                            BookId = new Guid("10405239-c787-4a4c-b01f-00b10a55ec9c"),
                            BorrowDate = new DateTime(2024, 4, 14, 15, 30, 26, 245, DateTimeKind.Local).AddTicks(9578),
                            BorrowStatus = "Borrowed",
                            CreatedBy = "system",
                            CreatedById = new Guid("ac947006-18d9-4006-a629-661840f97ceb"),
                            CreatedDate = new DateTime(2024, 4, 14, 15, 30, 26, 245, DateTimeKind.Local).AddTicks(9599),
                            DueDate = new DateTime(2024, 4, 28, 15, 30, 26, 245, DateTimeKind.Local).AddTicks(9579),
                            HasFee = false,
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            LenderId = new Guid("2171ad89-05af-4298-a1fd-d3cd21cb365d"),
                            MemberId = new Guid("41261b67-19e9-404e-9cf1-1cd45f378e41")
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BranchHour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("ClosingTime")
                        .HasColumnType("time");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("OpeningTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("LibraryBranchId");

                    b.ToTable("BranchHours", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc9dd40f-930c-4557-92c9-fcd6d4293056"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedBy = "system",
                            CreatedById = new Guid("ac947006-18d9-4006-a629-661840f97ceb"),
                            CreatedDate = new DateTime(2024, 4, 14, 15, 30, 26, 245, DateTimeKind.Local).AddTicks(9505),
                            DayOfWeek = 0,
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            LibraryBranchId = new Guid("9c17a9d1-277d-4227-adaa-1a0c83559188"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("a5f37372-9fbd-4114-8b38-10ca47f941f4"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedBy = "system",
                            CreatedById = new Guid("ac947006-18d9-4006-a629-661840f97ceb"),
                            CreatedDate = new DateTime(2024, 4, 14, 15, 30, 26, 245, DateTimeKind.Local).AddTicks(9508),
                            DayOfWeek = 0,
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            LibraryBranchId = new Guid("9c17a9d1-277d-4227-adaa-1a0c83559188"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("89610ec7-8914-49e6-8225-c9f8f810d735"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedBy = "system",
                            CreatedById = new Guid("ac947006-18d9-4006-a629-661840f97ceb"),
                            CreatedDate = new DateTime(2024, 4, 14, 15, 30, 26, 245, DateTimeKind.Local).AddTicks(9523),
                            DayOfWeek = 0,
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            LibraryBranchId = new Guid("9c17a9d1-277d-4227-adaa-1a0c83559188"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("b2610214-6538-4a50-93e0-0dc13a09556b"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedBy = "system",
                            CreatedById = new Guid("ac947006-18d9-4006-a629-661840f97ceb"),
                            CreatedDate = new DateTime(2024, 4, 14, 15, 30, 26, 245, DateTimeKind.Local).AddTicks(9549),
                            DayOfWeek = 0,
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            LibraryBranchId = new Guid("9c17a9d1-277d-4227-adaa-1a0c83559188"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("a409ae99-d76d-4f91-a00e-5cb2b1a92b8b"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedBy = "system",
                            CreatedById = new Guid("ac947006-18d9-4006-a629-661840f97ceb"),
                            CreatedDate = new DateTime(2024, 4, 14, 15, 30, 26, 245, DateTimeKind.Local).AddTicks(9551),
                            DayOfWeek = 0,
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            LibraryBranchId = new Guid("9c17a9d1-277d-4227-adaa-1a0c83559188"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("ab3aceab-9786-4548-b505-156a06beab3d"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedBy = "system",
                            CreatedById = new Guid("ac947006-18d9-4006-a629-661840f97ceb"),
                            CreatedDate = new DateTime(2024, 4, 14, 15, 30, 26, 245, DateTimeKind.Local).AddTicks(9554),
                            DayOfWeek = 0,
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            LibraryBranchId = new Guid("9c17a9d1-277d-4227-adaa-1a0c83559188"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("ab3dcc9c-0a7b-4352-9cdf-a1063b3e09f0"),
                            ClosingTime = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedBy = "system",
                            CreatedById = new Guid("ac947006-18d9-4006-a629-661840f97ceb"),
                            CreatedDate = new DateTime(2024, 4, 14, 15, 30, 26, 245, DateTimeKind.Local).AddTicks(9558),
                            DayOfWeek = 0,
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            LibraryBranchId = new Guid("9c17a9d1-277d-4227-adaa-1a0c83559188"),
                            OpeningTime = new TimeSpan(0, 0, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f596c279-7a11-47db-bfce-04b05981bc2d"),
                            CreatedBy = "system",
                            CreatedById = new Guid("ac947006-18d9-4006-a629-661840f97ceb"),
                            CreatedDate = new DateTime(2024, 4, 14, 15, 30, 26, 245, DateTimeKind.Local).AddTicks(9307),
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("211e9ca5-7fed-4244-8a9a-db52c8ef6b4b"),
                            CreatedBy = "system",
                            CreatedById = new Guid("ac947006-18d9-4006-a629-661840f97ceb"),
                            CreatedDate = new DateTime(2024, 4, 14, 15, 30, 26, 245, DateTimeKind.Local).AddTicks(9310),
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            Name = "Adventure"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchHourId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LibraryTransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OpeningDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("LibraryBranches", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9c17a9d1-277d-4227-adaa-1a0c83559188"),
                            Address = "123 Ana Cadde",
                            BookId = new Guid("00000000-0000-0000-0000-000000000000"),
                            BranchHourId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedBy = "system",
                            CreatedById = new Guid("ac947006-18d9-4006-a629-661840f97ceb"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bu bir örnek kütüphane şubesidir.",
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            LibraryBranchId = new Guid("00000000-0000-0000-0000-000000000000"),
                            LibraryTransactionId = new Guid("00000000-0000-0000-0000-000000000000"),
                            MemberId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Örnek Kütüphane Şubesi",
                            OpeningDate = new DateTime(2020, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = "123-456-7890",
                            StaffId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.LibraryTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LibraryBranchId");

                    b.ToTable("LibraryTransactions", "lm");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("BorrowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExtensionDurationInDays")
                        .HasColumnType("int");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPenalty")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExtensionAllowed")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxLateReturnsAllowed")
                        .HasColumnType("int");

                    b.Property<DateTime>("MembershipDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfLateReturns")
                        .HasColumnType("int");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PenaltyDurationInDays")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Members", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("41261b67-19e9-404e-9cf1-1cd45f378e41"),
                            Address = "123 Main Street",
                            BirthDate = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BorrowId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedBy = "system",
                            CreatedById = new Guid("ac947006-18d9-4006-a629-661840f97ceb"),
                            CreatedDate = new DateTime(2024, 4, 14, 15, 30, 26, 245, DateTimeKind.Local).AddTicks(9482),
                            Email = "john.doe@example.com",
                            ExtensionDurationInDays = 7,
                            Gender = true,
                            HasPenalty = false,
                            IsDeleted = false,
                            IsExtensionAllowed = true,
                            LastModifiedBy = "SYSTEM",
                            LibraryBranchId = new Guid("9c17a9d1-277d-4227-adaa-1a0c83559188"),
                            MaxLateReturnsAllowed = 3,
                            MembershipDate = new DateTime(2024, 4, 14, 15, 30, 26, 245, DateTimeKind.Local).AddTicks(9478),
                            Name = "John Doe",
                            NumberOfLateReturns = 0,
                            Occupation = "Software Engineer",
                            PenaltyDurationInDays = 0,
                            PhoneNumber = "+1234567890"
                        },
                        new
                        {
                            Id = new Guid("1e2e2b83-224f-4461-93e7-0b6448553409"),
                            Address = "456 Oak Street",
                            BirthDate = new DateTime(1985, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BorrowId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedBy = "system",
                            CreatedById = new Guid("ac947006-18d9-4006-a629-661840f97ceb"),
                            CreatedDate = new DateTime(2024, 4, 14, 15, 30, 26, 245, DateTimeKind.Local).AddTicks(9487),
                            Email = "jane.smith@example.com",
                            ExtensionDurationInDays = 0,
                            Gender = false,
                            HasPenalty = true,
                            IsDeleted = false,
                            IsExtensionAllowed = false,
                            LastModifiedBy = "SYSTEM",
                            LibraryBranchId = new Guid("9c17a9d1-277d-4227-adaa-1a0c83559188"),
                            MaxLateReturnsAllowed = 3,
                            MembershipDate = new DateTime(2024, 4, 14, 15, 30, 26, 245, DateTimeKind.Local).AddTicks(9485),
                            Name = "Jane Smith",
                            NumberOfLateReturns = 2,
                            Occupation = "Teacher",
                            PenaltyDurationInDays = 7,
                            PhoneNumber = "+1987654321"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publishers", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("76ca146f-0f45-4775-ac37-7c9e0c56e4b0"),
                            Address = "50 Bedford Square, London, England",
                            CreatedBy = "system",
                            CreatedById = new Guid("ac947006-18d9-4006-a629-661840f97ceb"),
                            CreatedDate = new DateTime(2024, 4, 14, 15, 30, 26, 245, DateTimeKind.Local).AddTicks(9325),
                            Email = "info@bloomsbury.com",
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            Name = "Bloomsbury Publishing",
                            PhoneNumber = "+44 (0)20 7631 5600",
                            Website = "https://www.bloomsbury.com/"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Return", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookStatus")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLate")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LoanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PenaltyDurationInDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LoanId")
                        .IsUnique();

                    b.ToTable("Returns", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("768b0557-4606-4b98-a5e8-a52c70e572bd"),
                            BookStatus = 4,
                            CreatedBy = "system",
                            CreatedById = new Guid("ac947006-18d9-4006-a629-661840f97ceb"),
                            CreatedDate = new DateTime(2024, 4, 14, 15, 30, 26, 245, DateTimeKind.Local).AddTicks(9652),
                            IsDeleted = false,
                            IsLate = false,
                            LastModifiedBy = "SYSTEM",
                            LoanId = new Guid("071c761a-ccd6-4146-b7f3-5c7cefaa1de2"),
                            PenaltyDurationInDays = -13,
                            ReturnDate = new DateTime(2024, 4, 14, 15, 30, 26, 245, DateTimeKind.Local).AddTicks(9621)
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EmploymentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFullTime")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LibraryBranchId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Staffs", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2171ad89-05af-4298-a1fd-d3cd21cb365d"),
                            Address = "Employee Address",
                            CreatedBy = "system",
                            CreatedById = new Guid("ac947006-18d9-4006-a629-661840f97ceb"),
                            CreatedDate = new DateTime(2024, 4, 14, 15, 30, 26, 245, DateTimeKind.Local).AddTicks(9574),
                            EmploymentDate = new DateTime(2024, 4, 14, 15, 30, 26, 245, DateTimeKind.Local).AddTicks(9566),
                            IsDeleted = false,
                            IsFullTime = true,
                            LibraryBranchId = new Guid("9c17a9d1-277d-4227-adaa-1a0c83559188"),
                            Phone = "+905553331122",
                            Salary = 3000.00m,
                            UserId = new Guid("2f4602fa-1225-4cfb-ac69-6c6b87608fc0")
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fc4f3658-6498-4f3f-9f04-11013025584b"),
                            BookId = new Guid("10405239-c787-4a4c-b01f-00b10a55ec9c"),
                            CreatedBy = "system",
                            CreatedById = new Guid("ac947006-18d9-4006-a629-661840f97ceb"),
                            CreatedDate = new DateTime(2024, 4, 14, 15, 30, 26, 245, DateTimeKind.Local).AddTicks(9459),
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            Name = "Hogwarts"
                        },
                        new
                        {
                            Id = new Guid("9a5e3858-aa7b-4818-856b-38c5bb21ca1e"),
                            BookId = new Guid("10405239-c787-4a4c-b01f-00b10a55ec9c"),
                            CreatedBy = "system",
                            CreatedById = new Guid("ac947006-18d9-4006-a629-661840f97ceb"),
                            CreatedDate = new DateTime(2024, 4, 14, 15, 30, 26, 245, DateTimeKind.Local).AddTicks(9462),
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            Name = "Harry Potter"
                        },
                        new
                        {
                            Id = new Guid("45be5d43-c2f4-45be-946b-c087166b4859"),
                            BookId = new Guid("10405239-c787-4a4c-b01f-00b10a55ec9c"),
                            CreatedBy = "system",
                            CreatedById = new Guid("ac947006-18d9-4006-a629-661840f97ceb"),
                            CreatedDate = new DateTime(2024, 4, 14, 15, 30, 26, 245, DateTimeKind.Local).AddTicks(9464),
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            Name = "Quidditch"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<Guid>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>");

                    b.HasDiscriminator().HasValue("AppUserRole");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("b9d2641b-437a-4515-92b9-137688dd16bf"),
                            RoleId = new Guid("e61c43e5-d940-424f-995c-f78767f43956")
                        },
                        new
                        {
                            UserId = new Guid("2f4602fa-1225-4cfb-ac69-6c6b87608fc0"),
                            RoleId = new Guid("8e0cd7bc-bc89-4ca0-8aca-f96488a8f8b6")
                        });
                });

            modelBuilder.Entity("BookAuthors", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookTags", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryBranchMembers", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", null)
                        .WithMany()
                        .HasForeignKey("LibraryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Member", null)
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppRole", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", null)
                        .WithMany("AppRoles")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.RoleScope", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppRole", "Role")
                        .WithMany("RoleScopes")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.Scope", "Scope")
                        .WithMany("RoleScopes")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Book", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", "LibraryBranch")
                        .WithMany("Books")
                        .HasForeignKey("LibraryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("LibraryBranch");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookStock", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Book", "Book")
                        .WithMany("BookStocks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Borrow", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Book", "Book")
                        .WithMany("Borrows")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Staff", "Lender")
                        .WithMany()
                        .HasForeignKey("LenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Member", "Member")
                        .WithMany("Borrows")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Lender");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BranchHour", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", "LibraryBranch")
                        .WithMany("BranchHours")
                        .HasForeignKey("LibraryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryBranch");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.LibraryTransaction", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", "LibraryBranch")
                        .WithMany("Transactions")
                        .HasForeignKey("LibraryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryBranch");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Return", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Borrow", "Borrow")
                        .WithOne("Return")
                        .HasForeignKey("LibraryTrackingApp.Domain.Entities.Library.Return", "LoanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Borrow");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Staff", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", "LibraryBranch")
                        .WithMany("Staffs")
                        .HasForeignKey("LibraryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", "User")
                        .WithOne("Staff")
                        .HasForeignKey("LibraryTrackingApp.Domain.Entities.Library.Staff", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LibraryBranch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppRole", b =>
                {
                    b.Navigation("RoleScopes");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Navigation("AppRoles");

                    b.Navigation("Staff")
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.Scope", b =>
                {
                    b.Navigation("RoleScopes");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Book", b =>
                {
                    b.Navigation("BookStocks");

                    b.Navigation("Borrows");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Borrow", b =>
                {
                    b.Navigation("Return")
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("BranchHours");

                    b.Navigation("Staffs");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Member", b =>
                {
                    b.Navigation("Borrows");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Publisher", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
