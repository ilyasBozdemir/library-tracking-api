// <auto-generated />
using System;
using LibraryTrackingApp.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryTrackingApp.Persistence.Migrations
{
    [DbContext(typeof(AppIdentityDbContext))]
    partial class AppIdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookAuthors", b =>
                {
                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookAuthors", "lm");

                    b.HasData(
                        new
                        {
                            AuthorId = new Guid("9bd17259-24a1-4fe0-abdc-b70796e8b52f"),
                            BookId = new Guid("6da9b541-a7e2-462d-b623-dc1aa6055687")
                        });
                });

            modelBuilder.Entity("BookTags", b =>
                {
                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TagId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookTags", "lm");

                    b.HasData(
                        new
                        {
                            TagId = new Guid("7cbe9df9-dca0-4498-921f-2cdc195b655b"),
                            BookId = new Guid("6da9b541-a7e2-462d-b623-dc1aa6055687")
                        },
                        new
                        {
                            TagId = new Guid("3dd801ff-debe-45e7-9e41-82082d4b3a21"),
                            BookId = new Guid("6da9b541-a7e2-462d-b623-dc1aa6055687")
                        });
                });

            modelBuilder.Entity("LibraryBranchMembers", b =>
                {
                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MemberId", "LibraryBranchId");

                    b.HasIndex("LibraryBranchId");

                    b.ToTable("LibraryBranchMembers", "lm");

                    b.HasData(
                        new
                        {
                            MemberId = new Guid("c8cdaba4-8d50-47ce-b901-02535538794b"),
                            LibraryBranchId = new Guid("495c6c35-3ba8-4c36-997c-a9f3a6c8c7ab")
                        },
                        new
                        {
                            MemberId = new Guid("f2fb9f79-95ea-4edc-a765-93f5e50e23b4"),
                            LibraryBranchId = new Guid("495c6c35-3ba8-4c36-997c-a9f3a6c8c7ab")
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Configuration.JwtSettingConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessTokenExpirationMinutes")
                        .HasColumnType("int")
                        .HasColumnName("AccessTokenExpirationMinutes");

                    b.Property<string>("Audience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Audience");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("Enabled");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("IsDeletedById")
                        .HasColumnType("int");

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Issuer");

                    b.Property<int>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SecretKey");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Subject");

                    b.HasKey("Id");

                    b.ToTable("JwtSettingConfigurations", "static");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Configuration.MailAccountConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("IsDeletedById")
                        .HasColumnType("int");

                    b.Property<int>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SmtpServer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("MailAccounts", "static");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5f21b5c9-1c31-44a5-a953-f1493717f2ba"),
                            ConcurrencyStamp = "778c282f-f4ab-40ab-9903-4f5f99354d46",
                            Name = "system",
                            NormalizedName = "SYSTEM"
                        },
                        new
                        {
                            Id = new Guid("8dd459f0-af81-4fee-8124-f367b14d390c"),
                            ConcurrencyStamp = "bcf80ab8-c7f8-4d57-b688-185254d4351f",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("15be1db9-8a32-41f2-bdd4-d0fbc7a9b555"),
                            ConcurrencyStamp = "5b6be477-5e0a-4326-8509-316c9d2ec81a",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = new Guid("e3bee32c-8bc8-459f-bdc7-c4dc27ff3343"),
                            ConcurrencyStamp = "16676b45-b01d-46b7-827b-e5ce43dce976",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            AccessFailedCount = 0,
                            Address = "123 System St.",
                            BirthDate = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "277f19e3-2a41-4b21-9011-45e275398fc9",
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDateUnix = 0L,
                            Email = "system@domain.com",
                            EmailConfirmed = true,
                            Gender = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LockoutEnabled = false,
                            Name = "System",
                            NormalizedEmail = "SYSTEM@DOMAIN.COM",
                            NormalizedUserName = "SYSTEM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPSBwkzx4B2FBOO2TMY1CmOTm8Hbx4Kkhx1jQ+cbXX0RawEL+fokxKfzfiTjdUvQ7w==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = new byte[0],
                            SecurityStamp = "",
                            Surname = "Admin",
                            TwoFactorEnabled = false,
                            UserName = "system"
                        },
                        new
                        {
                            Id = new Guid("4158956f-5ba6-41d1-8cd4-d57311dea737"),
                            AccessFailedCount = 0,
                            Address = "456 Admin St.",
                            BirthDate = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "fde1ecf3-1d5c-4b2a-9bb2-48ccb0487a8e",
                            CreatedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            CreatedDateUnix = 0L,
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            Gender = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            LockoutEnabled = false,
                            Name = "Admin",
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHkA/to6jUewOwYD8nDuRDn32jZFwDmDRSJD6wIojiW/uCVrIS/ljZFwm12MePq/0w==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = new byte[0],
                            SecurityStamp = "",
                            Surname = "Admin",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = new Guid("05c67957-851a-45ff-aa71-17c19117135c"),
                            AccessFailedCount = 0,
                            Address = "789 Employee St.",
                            BirthDate = new DateTime(1990, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "7c0dd22b-bd17-4dbd-a9df-366a2462ebbf",
                            CreatedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            CreatedDateUnix = 0L,
                            Email = "employee1@example.com",
                            EmailConfirmed = true,
                            Gender = 1,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            LockoutEnabled = false,
                            Name = "Employee",
                            NormalizedEmail = "EMPLOYEE1@EXAMPLE.COM",
                            NormalizedUserName = "EMPLOYEE1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPyJjMH2xm3l4fO0wrq3cW/opMDAVTxxphZEWMA77coyuuilw1p73KridrZRwBkIyQ==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = new byte[0],
                            SecurityStamp = "",
                            Surname = "One",
                            TwoFactorEnabled = false,
                            UserName = "employee1@example.com"
                        },
                        new
                        {
                            Id = new Guid("54db8065-ac01-416a-b5f3-b696e153e066"),
                            AccessFailedCount = 0,
                            Address = "123 Main Street",
                            BirthDate = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "631e6db1-e797-480e-8759-2bc2a4011b95",
                            CreatedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            CreatedDateUnix = 0L,
                            Email = "john.doe@example.com",
                            EmailConfirmed = true,
                            Gender = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            LockoutEnabled = false,
                            Name = "John",
                            NormalizedEmail = "JOHN.DOE@EXAMPLE.COM",
                            NormalizedUserName = "JOHN.DOE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENXGYARWgiVjj4PUgnZGYo+yYYsYr+IOHAYWnt7Ck257H+y4fJUDsK2fSSxDUdEGbw==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = new byte[0],
                            SecurityStamp = "",
                            Surname = "Doe",
                            TwoFactorEnabled = false,
                            UserName = "john.doe@example.com"
                        },
                        new
                        {
                            Id = new Guid("2648d2f6-3d0e-43d5-8ab0-f6961a661090"),
                            AccessFailedCount = 0,
                            Address = "456 Oak Street",
                            BirthDate = new DateTime(1985, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "42199153-6623-4a71-b123-aecae5e8146f",
                            CreatedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            CreatedDateUnix = 0L,
                            Email = "jane.smith@example.com",
                            EmailConfirmed = true,
                            Gender = 1,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            LockoutEnabled = false,
                            Name = "Jane",
                            NormalizedEmail = "JANE.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "JANE.SMITH@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH0Zc4xoOCN7ayCdq6eeO3mL9ekFKBwuJc5riA8wwtW0mBOvy119Lfs2FfY7ho+Vow==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = new byte[0],
                            SecurityStamp = "",
                            Surname = "Smith",
                            TwoFactorEnabled = false,
                            UserName = "jane.smith@example.com"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.RoleScope", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScopeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.HasKey("RoleId", "ScopeId");

                    b.HasIndex("ScopeId");

                    b.ToTable("RolePermissions", "identity");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.Scope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Scopes", "identity");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9bd17259-24a1-4fe0-abdc-b70796e8b52f"),
                            Biography = "Joanne Rowling, better known by her pen name J.K. Rowling, is a British author, philanthropist, film producer, television producer, and screenwriter. She is best known for writing the Harry Potter fantasy series.",
                            BirthDate = new DateTime(1965, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Country = "United Kingdom",
                            CreatedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            CreatedDateUnix = 1714328700L,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            Name = "J.K.",
                            Surname = "Rowling"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AudioFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BookFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BookStockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BorrowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CoverImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FavoriteListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OriginalPublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PageCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReadingListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FavoriteListId");

                    b.HasIndex("GenreId");

                    b.HasIndex("ISBN");

                    b.HasIndex("LibraryBranchId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("ReadingListId");

                    b.HasIndex("Title");

                    b.ToTable("Books", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6da9b541-a7e2-462d-b623-dc1aa6055687"),
                            AuthorId = new Guid("9bd17259-24a1-4fe0-abdc-b70796e8b52f"),
                            BookFormat = "PrintedBook",
                            BookLanguage = "English",
                            BookNumber = "A1",
                            BookStatus = "Active",
                            BookStockId = new Guid("240a693c-b4e9-46f8-a380-9649bf427450"),
                            BorrowId = new Guid("85eda2ef-0a39-43d8-9413-1c03c734f6cd"),
                            CoverImageUrl = "https://m.media-amazon.com/images/I/81q77Q39nEL._SY385_.jpg",
                            CreatedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            CreatedDateUnix = 1714328700L,
                            Description = "Harry Potter has never even heard of Hogwarts when the letters start dropping on the doormat at number four, Privet Drive. Addressed in green ink on yellowish parchment with a purple seal, they are swiftly confiscated by his grisly aunt and uncle. Then, on Harry's eleventh birthday, a great beetle-eyed giant of a man called Rubeus Hagrid bursts in with some astonishing news: Harry Potter is a wizard, and he has a place at Hogwarts School of Witchcraft and Wizardry. An incredible adventure is about to begin!",
                            GenreId = new Guid("3e3bafdb-3f07-428b-bbf7-00d300996d6d"),
                            ISBN = "9781408855652",
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsFeatured = true,
                            LastModifiedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            LibraryBranchId = new Guid("495c6c35-3ba8-4c36-997c-a9f3a6c8c7ab"),
                            OriginalPublicationDate = new DateTime(1997, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PageCount = 352,
                            PublicationDate = new DateTime(1997, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = new Guid("acc3b4ef-0af1-4603-a520-ab9d1162b825"),
                            Title = "Harry Potter and the Philosopher's Stone"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookGenre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BookGenres", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e3bafdb-3f07-428b-bbf7-00d300996d6d"),
                            CreatedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            CreatedDateUnix = 1714328700L,
                            IsActive = true,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("ca1c300a-1e3f-468b-bf9c-958e2d8646be"),
                            CreatedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            CreatedDateUnix = 1714328700L,
                            IsActive = true,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            Name = "Adventure"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookPublisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name");

                    b.ToTable("BookPublishers", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("acc3b4ef-0af1-4603-a520-ab9d1162b825"),
                            Address = "50 Bedford Square, London, England",
                            CreatedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            CreatedDateUnix = 1714328700L,
                            Email = "info@bloomsbury.com",
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            Name = "Bloomsbury Publishing",
                            PhoneNumber = "+44 (0)20 7631 5600",
                            Website = "https://www.bloomsbury.com/"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BookReviews", "lm");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookStock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("BookStocks", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("240a693c-b4e9-46f8-a380-9649bf427450"),
                            BookId = new Guid("6da9b541-a7e2-462d-b623-dc1aa6055687"),
                            CreatedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            CreatedDateUnix = 1714328700L,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            Quantity = 100
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Book_Tags", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7cbe9df9-dca0-4498-921f-2cdc195b655b"),
                            BookId = new Guid("6da9b541-a7e2-462d-b623-dc1aa6055687"),
                            CreatedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            CreatedDateUnix = 1714328700L,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            Name = "Hogwarts"
                        },
                        new
                        {
                            Id = new Guid("3dd801ff-debe-45e7-9e41-82082d4b3a21"),
                            BookId = new Guid("6da9b541-a7e2-462d-b623-dc1aa6055687"),
                            CreatedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            CreatedDateUnix = 1714328700L,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            Name = "Harry Potter"
                        },
                        new
                        {
                            Id = new Guid("adc919af-06be-4c13-822e-780da2e32996"),
                            BookId = new Guid("6da9b541-a7e2-462d-b623-dc1aa6055687"),
                            CreatedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            CreatedDateUnix = 1714328700L,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            Name = "Quidditch"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BorrowLend", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BorrowStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FeeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("HasFee")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsLate")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<int?>("LateDurationInDays")
                        .HasColumnType("int");

                    b.Property<Guid>("LenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("BorrowDate");

                    b.HasIndex("DueDate");

                    b.HasIndex("LenderId");

                    b.HasIndex("MemberId");

                    b.ToTable("BorrowLends", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("85eda2ef-0a39-43d8-9413-1c03c734f6cd"),
                            BookId = new Guid("6da9b541-a7e2-462d-b623-dc1aa6055687"),
                            BorrowDate = new DateTime(2024, 4, 28, 18, 25, 0, 460, DateTimeKind.Local).AddTicks(5917),
                            BorrowStatus = "Returned",
                            CreatedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            CreatedDateUnix = 1714328700L,
                            DueDate = new DateTime(2024, 5, 12, 18, 25, 0, 460, DateTimeKind.Local).AddTicks(5918),
                            FeeAmount = 0m,
                            HasFee = false,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsLate = false,
                            LastModifiedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            LenderId = new Guid("ca1f12e5-63a5-4dbd-8070-79967002db87"),
                            MemberId = new Guid("c8cdaba4-8d50-47ce-b901-02535538794b"),
                            ReturnDate = new DateTime(2024, 4, 28, 18, 35, 0, 460, DateTimeKind.Local).AddTicks(5928)
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BranchHour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("ClosingTime")
                        .HasColumnType("time");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("OpeningTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ClosingTime");

                    b.HasIndex("DayOfWeek");

                    b.HasIndex("LibraryBranchId");

                    b.HasIndex("OpeningTime");

                    b.ToTable("BranchHours", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("259561f5-d40c-4956-9676-ed90bb8aeb82"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            CreatedDateUnix = 1714328700L,
                            DayOfWeek = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            LibraryBranchId = new Guid("495c6c35-3ba8-4c36-997c-a9f3a6c8c7ab"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("2c91ac06-c143-42f3-8dcb-657c56673d8d"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            CreatedDateUnix = 1714328700L,
                            DayOfWeek = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            LibraryBranchId = new Guid("495c6c35-3ba8-4c36-997c-a9f3a6c8c7ab"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("287b544f-ba14-4ae2-b8a4-1170f786cb1b"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            CreatedDateUnix = 1714328700L,
                            DayOfWeek = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            LibraryBranchId = new Guid("495c6c35-3ba8-4c36-997c-a9f3a6c8c7ab"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("54678360-a567-446b-810e-def90bf74996"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            CreatedDateUnix = 1714328700L,
                            DayOfWeek = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            LibraryBranchId = new Guid("495c6c35-3ba8-4c36-997c-a9f3a6c8c7ab"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("eabbafb7-b5e9-4e12-aa77-d01cae543ef9"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            CreatedDateUnix = 1714328700L,
                            DayOfWeek = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            LibraryBranchId = new Guid("495c6c35-3ba8-4c36-997c-a9f3a6c8c7ab"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("88e3a14b-050c-4cd0-8f74-68728b13a51d"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            CreatedDateUnix = 1714328700L,
                            DayOfWeek = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            LibraryBranchId = new Guid("495c6c35-3ba8-4c36-997c-a9f3a6c8c7ab"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("8e4d174b-8c86-4e46-ad57-eb9359a70eeb"),
                            ClosingTime = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            CreatedDateUnix = 1714328700L,
                            DayOfWeek = 0,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            LibraryBranchId = new Guid("495c6c35-3ba8-4c36-997c-a9f3a6c8c7ab"),
                            OpeningTime = new TimeSpan(0, 0, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.FavoriteList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("FavoriteLists", "lm");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchHourId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LibraryTransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("LibraryBranches", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("495c6c35-3ba8-4c36-997c-a9f3a6c8c7ab"),
                            Address = "123 Ana Cadde",
                            BookId = new Guid("00000000-0000-0000-0000-000000000000"),
                            BranchHourId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            CreatedDateUnix = 1714328700L,
                            Description = "Bu bir örnek kütüphane şubesidir.",
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            LibraryBranchId = new Guid("00000000-0000-0000-0000-000000000000"),
                            LibraryTransactionId = new Guid("00000000-0000-0000-0000-000000000000"),
                            MemberId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Örnek Kütüphane Şubesi",
                            PhoneNumber = "123-456-7890",
                            StaffId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.LibraryTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LibraryBranchId");

                    b.ToTable("LibraryTransactions", "lm");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BorrowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<int>("ExtensionDurationInDays")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasPenalty")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsExtensionAllowed")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxLateReturnsAllowed")
                        .HasColumnType("int");

                    b.Property<string>("MemberType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MembershipDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfLateReturns")
                        .HasColumnType("int");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PenaltyDurationInDays")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Members", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c8cdaba4-8d50-47ce-b901-02535538794b"),
                            BorrowId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            CreatedDateUnix = 1714328700L,
                            ExtensionDurationInDays = 7,
                            Gender = "Male",
                            HasPenalty = false,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsExtensionAllowed = true,
                            LastModifiedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            LibraryBranchId = new Guid("495c6c35-3ba8-4c36-997c-a9f3a6c8c7ab"),
                            MaxLateReturnsAllowed = 3,
                            MemberType = "Adult",
                            MembershipDate = new DateTime(2024, 4, 28, 18, 25, 0, 460, DateTimeKind.Local).AddTicks(5858),
                            NumberOfLateReturns = 0,
                            Occupation = "Software Engineer",
                            PenaltyDurationInDays = 0,
                            UserId = new Guid("54db8065-ac01-416a-b5f3-b696e153e066")
                        },
                        new
                        {
                            Id = new Guid("f2fb9f79-95ea-4edc-a765-93f5e50e23b4"),
                            BorrowId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            CreatedDateUnix = 1714328700L,
                            ExtensionDurationInDays = 0,
                            Gender = "Female",
                            HasPenalty = true,
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsExtensionAllowed = false,
                            LastModifiedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            LibraryBranchId = new Guid("495c6c35-3ba8-4c36-997c-a9f3a6c8c7ab"),
                            MaxLateReturnsAllowed = 3,
                            MemberType = "Teacher",
                            MembershipDate = new DateTime(2024, 4, 28, 18, 25, 0, 460, DateTimeKind.Local).AddTicks(5865),
                            NumberOfLateReturns = 2,
                            Occupation = "Teacher",
                            PenaltyDurationInDays = 7,
                            UserId = new Guid("2648d2f6-3d0e-43d5-8ab0-f6961a661090")
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.ReadingList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ReadingLists", "lm");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EmploymentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsDeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsFullTime")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LastModifiedDateUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LibraryBranchId");

                    b.HasIndex("Phone");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Staffs", "lm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ca1f12e5-63a5-4dbd-8070-79967002db87"),
                            Address = "Employee Address",
                            CreatedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            CreatedDateUnix = 1714328700L,
                            EmploymentDate = new DateTime(2024, 4, 28, 18, 25, 0, 460, DateTimeKind.Local).AddTicks(5910),
                            IsDeleted = false,
                            IsDeletedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsFullTime = true,
                            LastModifiedById = new Guid("46e85cb7-93eb-4d8a-84f4-c6ee9d8d1da8"),
                            LibraryBranchId = new Guid("495c6c35-3ba8-4c36-997c-a9f3a6c8c7ab"),
                            Phone = "+905553331122",
                            Salary = 3000.00m,
                            UserId = new Guid("05c67957-851a-45ff-aa71-17c19117135c")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<Guid>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>");

                    b.HasDiscriminator().HasValue("AppUserRole");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("4158956f-5ba6-41d1-8cd4-d57311dea737"),
                            RoleId = new Guid("8dd459f0-af81-4fee-8124-f367b14d390c")
                        },
                        new
                        {
                            UserId = new Guid("05c67957-851a-45ff-aa71-17c19117135c"),
                            RoleId = new Guid("15be1db9-8a32-41f2-bdd4-d0fbc7a9b555")
                        });
                });

            modelBuilder.Entity("BookAuthors", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookTags", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.BookTag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryBranchMembers", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", null)
                        .WithMany()
                        .HasForeignKey("LibraryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Member", null)
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppRole", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", null)
                        .WithMany("AppRoles")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.RoleScope", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppRole", "Role")
                        .WithMany("RoleScopes")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.Scope", "Scope")
                        .WithMany("RoleScopes")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Book", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.FavoriteList", null)
                        .WithMany("FavoriteBooks")
                        .HasForeignKey("FavoriteListId");

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.BookGenre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", "LibraryBranch")
                        .WithMany("Books")
                        .HasForeignKey("LibraryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.BookPublisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.ReadingList", null)
                        .WithMany("Books")
                        .HasForeignKey("ReadingListId");

                    b.Navigation("Genre");

                    b.Navigation("LibraryBranch");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookStock", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Book", "Book")
                        .WithMany("BookStocks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BorrowLend", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Book", "Book")
                        .WithMany("Borrows")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Staff", "Lender")
                        .WithMany()
                        .HasForeignKey("LenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Member", "Member")
                        .WithMany("Borrows")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Lender");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BranchHour", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", "LibraryBranch")
                        .WithMany("BranchHours")
                        .HasForeignKey("LibraryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryBranch");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.LibraryTransaction", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", "LibraryBranch")
                        .WithMany("Transactions")
                        .HasForeignKey("LibraryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryBranch");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Member", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", "User")
                        .WithOne("Member")
                        .HasForeignKey("LibraryTrackingApp.Domain.Entities.Library.Member", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Staff", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", "LibraryBranch")
                        .WithMany("Staffs")
                        .HasForeignKey("LibraryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", "User")
                        .WithOne("Staff")
                        .HasForeignKey("LibraryTrackingApp.Domain.Entities.Library.Staff", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LibraryBranch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppRole", b =>
                {
                    b.Navigation("RoleScopes");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Navigation("AppRoles");

                    b.Navigation("Member")
                        .IsRequired();

                    b.Navigation("Staff")
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.Scope", b =>
                {
                    b.Navigation("RoleScopes");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Book", b =>
                {
                    b.Navigation("BookStocks");

                    b.Navigation("Borrows");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookGenre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookPublisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.FavoriteList", b =>
                {
                    b.Navigation("FavoriteBooks");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("BranchHours");

                    b.Navigation("Staffs");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Member", b =>
                {
                    b.Navigation("Borrows");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.ReadingList", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
