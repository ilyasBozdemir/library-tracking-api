// <auto-generated />
using System;
using LibraryTrackingApp.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryTrackingApp.Persistence.Migrations
{
    [DbContext(typeof(AppIdentityDbContext))]
    partial class AppIdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookAuthor", b =>
                {
                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookAuthor", (string)null);

                    b.HasData(
                        new
                        {
                            AuthorId = new Guid("f08db0d0-422c-436c-b262-d92ce18abd75"),
                            BookId = new Guid("5d9de716-b54f-4317-8a50-c8d1d1e54e87")
                        });
                });

            modelBuilder.Entity("BookTag", b =>
                {
                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TagId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookTag", (string)null);

                    b.HasData(
                        new
                        {
                            TagId = new Guid("9ea61456-c276-44f3-9a55-b29aba8773c1"),
                            BookId = new Guid("5d9de716-b54f-4317-8a50-c8d1d1e54e87")
                        },
                        new
                        {
                            TagId = new Guid("32f8fdba-8f37-4803-b542-5d66e412e03a"),
                            BookId = new Guid("5d9de716-b54f-4317-8a50-c8d1d1e54e87")
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("43f5fb94-f34c-4c1f-a72b-5f472ffddfba"),
                            ConcurrencyStamp = "18cc850a-e844-4a58-8f19-1cf0972f1a2a",
                            Name = "system",
                            NormalizedName = "SYSTEM"
                        },
                        new
                        {
                            Id = new Guid("eca03ed8-8a54-4363-b4c0-3b9134fc512d"),
                            ConcurrencyStamp = "eef6be0f-e49a-4802-b495-b7e45f238360",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("bbed431e-a0b9-41c5-b98e-755631670820"),
                            ConcurrencyStamp = "2b467c78-0b6a-49b1-ab18-4ef0f25bc976",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = new Guid("4808d776-2d79-47c2-af21-31d1882e669d"),
                            ConcurrencyStamp = "9405f1fb-5a31-4c97-8e67-6abc9a3035b9",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0d01e176-ab43-4868-b448-c20f0cc4a0ca"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bc3dd1ea-0ddd-4db7-a8b5-a1a38e5b3bff",
                            CreatedBy = "SYSTEM",
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2024, 4, 13, 22, 1, 54, 637, DateTimeKind.Local).AddTicks(3979),
                            Email = "system@domain.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            LockoutEnabled = false,
                            Name = "system",
                            NormalizedEmail = "SYSTEM@DOMAIN.COM",
                            NormalizedUserName = "SYSTEM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP5ojmurcRa/KXdpm6mzokDnTuCIRa7eJ55GEAmkU7X6Y+Ax/XrIDE9mDcWiEIud2A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Surname = "system",
                            TwoFactorEnabled = false,
                            UserName = "system"
                        },
                        new
                        {
                            Id = new Guid("124b67f4-55d3-4095-8f9a-c3380cbb17a9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "19583f94-15d4-4833-bb46-fe3812d46d8c",
                            CreatedBy = "system",
                            CreatedById = new Guid("0d01e176-ab43-4868-b448-c20f0cc4a0ca"),
                            CreatedDate = new DateTime(2024, 4, 13, 22, 1, 54, 719, DateTimeKind.Local).AddTicks(8027),
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            LockoutEnabled = false,
                            Name = "admin",
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ6km5zMMgzlmW74TNFmEw2Cmm9JAnCADSvCsu1W86aaByl6yXkNd6b4yMbqF7B9pw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Surname = "admin",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = new Guid("e3708dc1-90e7-47b5-89d7-98459e52198d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c7af404-8b72-474c-8257-0e159b6b5274",
                            CreatedBy = "system",
                            CreatedById = new Guid("0d01e176-ab43-4868-b448-c20f0cc4a0ca"),
                            CreatedDate = new DateTime(2024, 4, 13, 22, 1, 54, 762, DateTimeKind.Local).AddTicks(6898),
                            Email = "employee1@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            LockoutEnabled = false,
                            Name = "admin",
                            NormalizedEmail = "EMPLOYEE2@EXAMPLE.COM",
                            NormalizedUserName = "EMPLOYEE2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEE02TEN47ob/kZBH77WbfZ74ItIUU8WngxRWXgub29gEZTNrZbZBIBFdkscOHEzbHA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Surname = "admin",
                            TwoFactorEnabled = false,
                            UserName = "employee1@example.com"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.RoleScope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScopeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("ScopeId");

                    b.ToTable("RoleScope");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.Scope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Scope");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f08db0d0-422c-436c-b262-d92ce18abd75"),
                            Biography = "Joanne Rowling, better known by her pen name J.K. Rowling, is a British author, philanthropist, film producer, television producer, and screenwriter. She is best known for writing the Harry Potter fantasy series.",
                            BirthDate = new DateTime(1965, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Country = "United Kingdom",
                            CreatedBy = "system",
                            CreatedById = new Guid("0d01e176-ab43-4868-b448-c20f0cc4a0ca"),
                            CreatedDate = new DateTime(2024, 4, 13, 22, 1, 54, 807, DateTimeKind.Local).AddTicks(5970),
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            Name = "J.K.",
                            Surname = "Rowling"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookLanguage")
                        .HasColumnType("int");

                    b.Property<Guid>("BookStockBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BorrowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CoverImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Format")
                        .HasColumnType("int");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OriginalPublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PageCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("LibraryBranchId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5d9de716-b54f-4317-8a50-c8d1d1e54e87"),
                            AuthorId = new Guid("f08db0d0-422c-436c-b262-d92ce18abd75"),
                            BookLanguage = 0,
                            BookStockBranchId = new Guid("00000000-0000-0000-0000-000000000000"),
                            BorrowId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CoverImageUrl = "https://m.media-amazon.com/images/I/81q77Q39nEL._SY385_.jpg",
                            CreatedBy = "system",
                            CreatedById = new Guid("0d01e176-ab43-4868-b448-c20f0cc4a0ca"),
                            CreatedDate = new DateTime(2024, 4, 13, 22, 1, 54, 807, DateTimeKind.Local).AddTicks(6002),
                            Description = "Harry Potter has never even heard of Hogwarts when the letters start dropping on the doormat at number four, Privet Drive. Addressed in green ink on yellowish parchment with a purple seal, they are swiftly confiscated by his grisly aunt and uncle. Then, on Harry's eleventh birthday, a great beetle-eyed giant of a man called Rubeus Hagrid bursts in with some astonishing news: Harry Potter is a wizard, and he has a place at Hogwarts School of Witchcraft and Wizardry. An incredible adventure is about to begin!",
                            Format = 0,
                            GenreId = new Guid("21919a2d-29cb-4fe1-9214-3590b5d9a946"),
                            ISBN = "9781408855652",
                            IsDeleted = false,
                            IsFeatured = true,
                            LastModifiedBy = "SYSTEM",
                            LibraryBranchId = new Guid("d2dfa162-7790-4565-ae14-684c26b0f112"),
                            OriginalPublicationDate = new DateTime(1997, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PageCount = 352,
                            PublicationDate = new DateTime(1997, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = new Guid("d552c02c-08d5-41bd-b889-de58d59e6d2b"),
                            Status = 4,
                            Title = "Harry Potter and the Philosopher's Stone"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookStock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("BookStocks", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("310b73a8-e27c-4dde-9c4d-250f8c3e91d8"),
                            BookId = new Guid("5d9de716-b54f-4317-8a50-c8d1d1e54e87"),
                            CreatedBy = "system",
                            CreatedById = new Guid("0d01e176-ab43-4868-b448-c20f0cc4a0ca"),
                            CreatedDate = new DateTime(2024, 4, 13, 22, 1, 54, 807, DateTimeKind.Local).AddTicks(6274),
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            Quantity = 100
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Borrow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BorrowStatus")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasFee")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("LenderId");

                    b.HasIndex("MemberId");

                    b.ToTable("Borrows", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("86b3e870-4516-4a13-9648-a30d7f4a6ec0"),
                            BookId = new Guid("5d9de716-b54f-4317-8a50-c8d1d1e54e87"),
                            BorrowDate = new DateTime(2024, 4, 13, 22, 1, 54, 807, DateTimeKind.Local).AddTicks(6291),
                            BorrowStatus = 2,
                            CreatedBy = "system",
                            CreatedById = new Guid("0d01e176-ab43-4868-b448-c20f0cc4a0ca"),
                            CreatedDate = new DateTime(2024, 4, 13, 22, 1, 54, 807, DateTimeKind.Local).AddTicks(6311),
                            DueDate = new DateTime(2024, 4, 27, 22, 1, 54, 807, DateTimeKind.Local).AddTicks(6292),
                            HasFee = false,
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            LenderId = new Guid("30b98605-7cd2-4de8-9da5-9fc3483045ff"),
                            MemberId = new Guid("e9e4af38-9e86-424c-ab61-ac94d28dd9fb")
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BranchHour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("ClosingTime")
                        .HasColumnType("time");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("OpeningTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("LibraryBranchId");

                    b.ToTable("BranchHours", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5d609e91-2f69-4586-b6bc-c9700cc75e67"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedBy = "system",
                            CreatedById = new Guid("0d01e176-ab43-4868-b448-c20f0cc4a0ca"),
                            CreatedDate = new DateTime(2024, 4, 13, 22, 1, 54, 807, DateTimeKind.Local).AddTicks(6229),
                            DayOfWeek = 0,
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            LibraryBranchId = new Guid("d2dfa162-7790-4565-ae14-684c26b0f112"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("14f5ac13-5a16-4436-a12d-c63df4ae94d2"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedBy = "system",
                            CreatedById = new Guid("0d01e176-ab43-4868-b448-c20f0cc4a0ca"),
                            CreatedDate = new DateTime(2024, 4, 13, 22, 1, 54, 807, DateTimeKind.Local).AddTicks(6232),
                            DayOfWeek = 0,
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            LibraryBranchId = new Guid("d2dfa162-7790-4565-ae14-684c26b0f112"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("fee463b5-88f5-4480-a44d-9dcf40ec5d46"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedBy = "system",
                            CreatedById = new Guid("0d01e176-ab43-4868-b448-c20f0cc4a0ca"),
                            CreatedDate = new DateTime(2024, 4, 13, 22, 1, 54, 807, DateTimeKind.Local).AddTicks(6258),
                            DayOfWeek = 0,
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            LibraryBranchId = new Guid("d2dfa162-7790-4565-ae14-684c26b0f112"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("bbcd93d4-7b0c-47b2-bcf4-047be3bd1fec"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedBy = "system",
                            CreatedById = new Guid("0d01e176-ab43-4868-b448-c20f0cc4a0ca"),
                            CreatedDate = new DateTime(2024, 4, 13, 22, 1, 54, 807, DateTimeKind.Local).AddTicks(6262),
                            DayOfWeek = 0,
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            LibraryBranchId = new Guid("d2dfa162-7790-4565-ae14-684c26b0f112"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("60cfebdf-200c-47ce-bc67-b5f3084024f7"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedBy = "system",
                            CreatedById = new Guid("0d01e176-ab43-4868-b448-c20f0cc4a0ca"),
                            CreatedDate = new DateTime(2024, 4, 13, 22, 1, 54, 807, DateTimeKind.Local).AddTicks(6265),
                            DayOfWeek = 0,
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            LibraryBranchId = new Guid("d2dfa162-7790-4565-ae14-684c26b0f112"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("64f59f71-781e-420a-a310-2f6d291ee0f8"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            CreatedBy = "system",
                            CreatedById = new Guid("0d01e176-ab43-4868-b448-c20f0cc4a0ca"),
                            CreatedDate = new DateTime(2024, 4, 13, 22, 1, 54, 807, DateTimeKind.Local).AddTicks(6267),
                            DayOfWeek = 0,
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            LibraryBranchId = new Guid("d2dfa162-7790-4565-ae14-684c26b0f112"),
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("ae93e23f-9e9b-4e81-af2a-dabd8136afb9"),
                            ClosingTime = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedBy = "system",
                            CreatedById = new Guid("0d01e176-ab43-4868-b448-c20f0cc4a0ca"),
                            CreatedDate = new DateTime(2024, 4, 13, 22, 1, 54, 807, DateTimeKind.Local).AddTicks(6270),
                            DayOfWeek = 0,
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            LibraryBranchId = new Guid("d2dfa162-7790-4565-ae14-684c26b0f112"),
                            OpeningTime = new TimeSpan(0, 0, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("21919a2d-29cb-4fe1-9214-3590b5d9a946"),
                            CreatedBy = "system",
                            CreatedById = new Guid("0d01e176-ab43-4868-b448-c20f0cc4a0ca"),
                            CreatedDate = new DateTime(2024, 4, 13, 22, 1, 54, 807, DateTimeKind.Local).AddTicks(5976),
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("72261faa-0991-45ca-9550-f151fef7dbd6"),
                            CreatedBy = "system",
                            CreatedById = new Guid("0d01e176-ab43-4868-b448-c20f0cc4a0ca"),
                            CreatedDate = new DateTime(2024, 4, 13, 22, 1, 54, 807, DateTimeKind.Local).AddTicks(5979),
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            Name = "Adventure"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchHourId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LibraryTransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OpeningDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("LibraryBranches", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d2dfa162-7790-4565-ae14-684c26b0f112"),
                            Address = "123 Ana Cadde",
                            BookId = new Guid("00000000-0000-0000-0000-000000000000"),
                            BranchHourId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedBy = "system",
                            CreatedById = new Guid("0d01e176-ab43-4868-b448-c20f0cc4a0ca"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bu bir örnek kütüphane şubesidir.",
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            LibraryBranchId = new Guid("00000000-0000-0000-0000-000000000000"),
                            LibraryTransactionId = new Guid("00000000-0000-0000-0000-000000000000"),
                            MemberId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Örnek Kütüphane Şubesi",
                            OpeningDate = new DateTime(2020, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = "123-456-7890",
                            StaffId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.LibraryTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LibraryBranchId");

                    b.ToTable("LibraryTransactions", (string)null);
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("BorrowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExtensionDurationInDays")
                        .HasColumnType("int");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPenalty")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExtensionAllowed")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxLateReturnsAllowed")
                        .HasColumnType("int");

                    b.Property<DateTime>("MembershipDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfLateReturns")
                        .HasColumnType("int");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PenaltyDurationInDays")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Members", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e9e4af38-9e86-424c-ab61-ac94d28dd9fb"),
                            Address = "123 Main Street",
                            BirthDate = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BorrowId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedBy = "system",
                            CreatedById = new Guid("0d01e176-ab43-4868-b448-c20f0cc4a0ca"),
                            CreatedDate = new DateTime(2024, 4, 13, 22, 1, 54, 807, DateTimeKind.Local).AddTicks(6206),
                            Email = "john.doe@example.com",
                            ExtensionDurationInDays = 7,
                            Gender = true,
                            HasPenalty = false,
                            IsDeleted = false,
                            IsExtensionAllowed = true,
                            LastModifiedBy = "SYSTEM",
                            LibraryBranchId = new Guid("d2dfa162-7790-4565-ae14-684c26b0f112"),
                            MaxLateReturnsAllowed = 3,
                            MembershipDate = new DateTime(2024, 4, 13, 22, 1, 54, 807, DateTimeKind.Local).AddTicks(6197),
                            Name = "John Doe",
                            NumberOfLateReturns = 0,
                            Occupation = "Software Engineer",
                            PenaltyDurationInDays = 0,
                            PhoneNumber = "+1234567890"
                        },
                        new
                        {
                            Id = new Guid("6e479a11-766a-4018-8348-65823d2eea98"),
                            Address = "456 Oak Street",
                            BirthDate = new DateTime(1985, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BorrowId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedBy = "system",
                            CreatedById = new Guid("0d01e176-ab43-4868-b448-c20f0cc4a0ca"),
                            CreatedDate = new DateTime(2024, 4, 13, 22, 1, 54, 807, DateTimeKind.Local).AddTicks(6212),
                            Email = "jane.smith@example.com",
                            ExtensionDurationInDays = 0,
                            Gender = false,
                            HasPenalty = true,
                            IsDeleted = false,
                            IsExtensionAllowed = false,
                            LastModifiedBy = "SYSTEM",
                            LibraryBranchId = new Guid("d2dfa162-7790-4565-ae14-684c26b0f112"),
                            MaxLateReturnsAllowed = 3,
                            MembershipDate = new DateTime(2024, 4, 13, 22, 1, 54, 807, DateTimeKind.Local).AddTicks(6209),
                            Name = "Jane Smith",
                            NumberOfLateReturns = 2,
                            Occupation = "Teacher",
                            PenaltyDurationInDays = 7,
                            PhoneNumber = "+1987654321"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publishers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d552c02c-08d5-41bd-b889-de58d59e6d2b"),
                            Address = "50 Bedford Square, London, England",
                            CreatedBy = "system",
                            CreatedById = new Guid("0d01e176-ab43-4868-b448-c20f0cc4a0ca"),
                            CreatedDate = new DateTime(2024, 4, 13, 22, 1, 54, 807, DateTimeKind.Local).AddTicks(5994),
                            Email = "info@bloomsbury.com",
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            Name = "Bloomsbury Publishing",
                            PhoneNumber = "+44 (0)20 7631 5600",
                            Website = "https://www.bloomsbury.com/"
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Return", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookStatus")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLate")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LoanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PenaltyDurationInDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LoanId")
                        .IsUnique();

                    b.ToTable("Returns", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b5f0f3a7-d6f2-4f4f-9996-2c64ea5c5b82"),
                            BookStatus = 4,
                            CreatedBy = "system",
                            CreatedById = new Guid("0d01e176-ab43-4868-b448-c20f0cc4a0ca"),
                            CreatedDate = new DateTime(2024, 4, 13, 22, 1, 54, 807, DateTimeKind.Local).AddTicks(6362),
                            IsDeleted = false,
                            IsLate = false,
                            LastModifiedBy = "SYSTEM",
                            LoanId = new Guid("86b3e870-4516-4a13-9648-a30d7f4a6ec0"),
                            PenaltyDurationInDays = -13,
                            ReturnDate = new DateTime(2024, 4, 13, 22, 1, 54, 807, DateTimeKind.Local).AddTicks(6315)
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EmploymentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFullTime")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LibraryBranchId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Staff", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("30b98605-7cd2-4de8-9da5-9fc3483045ff"),
                            Address = "Employee Address",
                            CreatedBy = "system",
                            CreatedById = new Guid("0d01e176-ab43-4868-b448-c20f0cc4a0ca"),
                            CreatedDate = new DateTime(2024, 4, 13, 22, 1, 54, 807, DateTimeKind.Local).AddTicks(6288),
                            EmploymentDate = new DateTime(2024, 4, 13, 22, 1, 54, 807, DateTimeKind.Local).AddTicks(6279),
                            IsDeleted = false,
                            IsFullTime = true,
                            LibraryBranchId = new Guid("d2dfa162-7790-4565-ae14-684c26b0f112"),
                            Phone = "+905553331122",
                            Salary = 3000.00m,
                            UserId = new Guid("e3708dc1-90e7-47b5-89d7-98459e52198d")
                        });
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ea61456-c276-44f3-9a55-b29aba8773c1"),
                            BookId = new Guid("5d9de716-b54f-4317-8a50-c8d1d1e54e87"),
                            CreatedBy = "system",
                            CreatedById = new Guid("0d01e176-ab43-4868-b448-c20f0cc4a0ca"),
                            CreatedDate = new DateTime(2024, 4, 13, 22, 1, 54, 807, DateTimeKind.Local).AddTicks(6156),
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            Name = "Hogwarts"
                        },
                        new
                        {
                            Id = new Guid("32f8fdba-8f37-4803-b542-5d66e412e03a"),
                            BookId = new Guid("5d9de716-b54f-4317-8a50-c8d1d1e54e87"),
                            CreatedBy = "system",
                            CreatedById = new Guid("0d01e176-ab43-4868-b448-c20f0cc4a0ca"),
                            CreatedDate = new DateTime(2024, 4, 13, 22, 1, 54, 807, DateTimeKind.Local).AddTicks(6159),
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            Name = "Harry Potter"
                        },
                        new
                        {
                            Id = new Guid("f5404d3b-b8f9-4423-b2bd-b720eb66fb85"),
                            BookId = new Guid("5d9de716-b54f-4317-8a50-c8d1d1e54e87"),
                            CreatedBy = "system",
                            CreatedById = new Guid("0d01e176-ab43-4868-b448-c20f0cc4a0ca"),
                            CreatedDate = new DateTime(2024, 4, 13, 22, 1, 54, 807, DateTimeKind.Local).AddTicks(6161),
                            IsDeleted = false,
                            LastModifiedBy = "SYSTEM",
                            Name = "Quidditch"
                        });
                });

            modelBuilder.Entity("MemberLibraryBranch", b =>
                {
                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LibraryBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MemberId", "LibraryBranchId");

                    b.HasIndex("LibraryBranchId");

                    b.ToTable("MemberLibraryBranch", (string)null);

                    b.HasData(
                        new
                        {
                            MemberId = new Guid("e9e4af38-9e86-424c-ab61-ac94d28dd9fb"),
                            LibraryBranchId = new Guid("d2dfa162-7790-4565-ae14-684c26b0f112")
                        },
                        new
                        {
                            MemberId = new Guid("6e479a11-766a-4018-8348-65823d2eea98"),
                            LibraryBranchId = new Guid("d2dfa162-7790-4565-ae14-684c26b0f112")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<Guid>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>");

                    b.HasDiscriminator().HasValue("AppUserRole");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("124b67f4-55d3-4095-8f9a-c3380cbb17a9"),
                            RoleId = new Guid("eca03ed8-8a54-4363-b4c0-3b9134fc512d")
                        },
                        new
                        {
                            UserId = new Guid("e3708dc1-90e7-47b5-89d7-98459e52198d"),
                            RoleId = new Guid("bbed431e-a0b9-41c5-b98e-755631670820")
                        });
                });

            modelBuilder.Entity("BookAuthor", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookTag", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppRole", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", null)
                        .WithMany("AppRoles")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.RoleScope", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppRole", "Role")
                        .WithMany("RoleScopes")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.Scope", "Scope")
                        .WithMany("RoleScopes")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Book", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", "LibraryBranch")
                        .WithMany("Books")
                        .HasForeignKey("LibraryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("LibraryBranch");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BookStock", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Book", "Book")
                        .WithMany("BookStocks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Borrow", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Book", "Book")
                        .WithMany("Borrows")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Staff", "Lender")
                        .WithMany()
                        .HasForeignKey("LenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Member", "Member")
                        .WithMany("Borrows")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Lender");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.BranchHour", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", "LibraryBranch")
                        .WithMany("BranchHours")
                        .HasForeignKey("LibraryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryBranch");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.LibraryTransaction", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", "LibraryBranch")
                        .WithMany("Transactions")
                        .HasForeignKey("LibraryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryBranch");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Return", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Borrow", "Borrow")
                        .WithOne("Return")
                        .HasForeignKey("LibraryTrackingApp.Domain.Entities.Library.Return", "LoanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Borrow");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Staff", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", "LibraryBranch")
                        .WithMany("Staffs")
                        .HasForeignKey("LibraryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", "User")
                        .WithOne("Staff")
                        .HasForeignKey("LibraryTrackingApp.Domain.Entities.Library.Staff", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LibraryBranch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MemberLibraryBranch", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", null)
                        .WithMany()
                        .HasForeignKey("LibraryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Library.Member", null)
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LibraryTrackingApp.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppRole", b =>
                {
                    b.Navigation("RoleScopes");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Navigation("AppRoles");

                    b.Navigation("Staff")
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Identity.Scope", b =>
                {
                    b.Navigation("RoleScopes");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Book", b =>
                {
                    b.Navigation("BookStocks");

                    b.Navigation("Borrows");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Borrow", b =>
                {
                    b.Navigation("Return")
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.LibraryBranch", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("BranchHours");

                    b.Navigation("Staffs");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Member", b =>
                {
                    b.Navigation("Borrows");
                });

            modelBuilder.Entity("LibraryTrackingApp.Domain.Entities.Library.Publisher", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
